<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Yongbing's Blog]]></title>
  <link href="http://yongbingchen.github.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://yongbingchen.github.com/"/>
  <updated>2015-04-09T18:40:02-07:00</updated>
  <id>http://yongbingchen.github.com/</id>
  <author>
    <name><![CDATA[Yongbing Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Bluetooth: pairing a HID device]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/07/12/android-bluetooth-pair-a-hid-device/"/>
    <updated>2013-07-12T23:06:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/07/12/android-bluetooth-pair-a-hid-device</id>
    <content type="html"><![CDATA[<p><img src="http://yongbingchen.github.com/images/android_bt/android-pair-hid-device.jpg" title="" ></p>

<ol>
<li>User started scanning from Bluetooth Settings UI, Android Bluetooth service responded to this request, calling bluedroid to start discovery.</li>
<li>Bluedroid found nearby devices in discovery mode, reported them through device found callback.</li>
<li>User selected one device from found devices, started to pairing it, Android Bluetooth service called bluedroid to creat bond with it.</li>
<li>Bluedroid requested PIN code from end user (simple secure pairing mode has different procedure).</li>
<li>Bluedroid started SDP process to find remote device's UUID.</li>
<li>After SDP finished, bluedroid called remote device property changed on UUID changed to notify Android.</li>
<li>Android received the event, then HID profile service started to connect it. Without this SDP event, the pair will fail due to no further action over L2CAP anymore, see <a href ="http://yongbingchen.github.com/logs/andoird-hid/SDP-fail-cause-HID-pair-fail.txt ">pairing failed by SDP</a> for example.</li>
<li>In HID profile connection process, bluedroid conducted another round of SDP, fetched HID descriptor from remote device, created hidraw and input device file for the new remote device, through uhid interface, the remote device was ready to use from that point.</li>
</ol>


<p>Logs and call stack:
<blockquote><p></p><footer><strong>scan to found device cb</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/start-discovery-to-found-device-callback.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>pair to bonded cb</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/start-pairing-to-bonded.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>on UUID changed to HID connect</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/onUuidChanged-to-HID-connect.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote></p>

<p>Full logs:
<blockquote><p></p><footer><strong>scan</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/logs/scan.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>pair</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/logs/pair.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>hcidump</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/logs/hcidump.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>air log</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/logs/scan-pair.cfa'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dump_stack in Android native C code]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/09/dump-stack-in-android-native-c-code/"/>
    <updated>2013-05-09T21:34:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/09/dump-stack-in-android-native-c-code</id>
    <content type="html"><![CDATA[<p>1 Wrapper Android C++ method into a C function:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="err">$</span> <span class="n">cat</span> <span class="n">bta</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">dump_stack</span><span class="p">.</span><span class="n">cpp</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">utils</span><span class="o">/</span><span class="n">CallStack</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">android</span><span class="p">;</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="kt">void</span> <span class="n">dump_stack_android</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">CallStack</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">stack</span><span class="p">.</span><span class="n">update</span><span class="p">();</span>
</span><span class='line'>    <span class="n">stack</span><span class="p">.</span><span class="n">dump</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>2 Call this C function from target place:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">bta</span><span class="o">/</span><span class="n">dm</span><span class="o">/</span><span class="n">bta_dm_act</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="o">/</span><span class="n">bta</span><span class="o">/</span><span class="n">dm</span><span class="o">/</span><span class="n">bta_dm_act</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="o">+</span><span class="k">extern</span> <span class="kt">void</span> <span class="n">dump_stack_android</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'> <span class="k">static</span> <span class="kt">void</span> <span class="n">bta_dm_adjust_roles</span><span class="p">(</span><span class="n">BOOLEAN</span> <span class="n">delay_role_switch</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'><span class="o">+</span>    <span class="n">dump_stack_android</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">if</span><span class="p">(</span><span class="n">bta_dm_cb</span><span class="p">.</span><span class="n">device_list</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>3 Add library libutils as dependency in LOCAL_SHARED_LIBRARIES,
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">Android</span><span class="p">.</span><span class="n">mk</span> <span class="n">b</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">Android</span><span class="p">.</span><span class="n">mk</span>
</span><span class='line'> <span class="n">LOCAL_SRC_FILES</span><span class="o">+=</span> \
</span><span class='line'> <span class="o">+</span>       <span class="p">..</span><span class="o">/</span><span class="n">bta</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">dump_stack</span><span class="p">.</span><span class="n">cpp</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>     <span class="p">..</span><span class="o">/</span><span class="n">udrv</span><span class="o">/</span><span class="n">ulinux</span><span class="o">/</span><span class="n">uipc</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="n">LOCAL_SHARED_LIBRARIES</span> <span class="o">:=</span> <span class="err">\</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">libcutils</span> \
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span> <span class="n">libutils</span> \
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>


<p>I met a ld error as:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">error:</span> <span class="n">undefined</span> <span class="n">reference</span> <span class="n">to</span> <span class="err">&#39;</span><span class="n">android</span><span class="o">::</span><span class="n">CallStack</span><span class="o">::</span><span class="n">CallStack</span><span class="p">()</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
It turned out that I added the libutils dependency into a static library libbt-brcm_bta, which can not solve this dynamic symbol at link time
<blockquote><p></p><footer><strong>refer to this wiki</strong> <cite><a href='https://en.wikipedia.org/wiki/Static_library'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>
Move the dependency to dynamic library bluetooth.default.so solved the problem.</p>

<p>The final result on running board is:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">root</span><span class="err">@</span><span class="nl">android:</span><span class="o">/</span> <span class="err">#</span> <span class="n">logcat</span> <span class="o">-</span><span class="n">v</span> <span class="n">time</span> <span class="o">|</span><span class="n">grep</span> <span class="n">CallStack</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">00</span>  <span class="n">pc</span> <span class="mo">0005</span><span class="n">c444</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">dump_stack_android</span><span class="o">+</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">01</span>  <span class="n">pc</span> <span class="mo">0004</span><span class="n">ddb2</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">02</span>  <span class="n">pc</span> <span class="mo">0004</span><span class="n">c310</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_sys_conn_close</span><span class="o">+</span><span class="mi">27</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">03</span>  <span class="n">pc</span> <span class="mo">000577</span><span class="n">d4</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_av_str_closed</span><span class="o">+</span><span class="mi">115</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">04</span>  <span class="n">pc</span> <span class="mo">0004705</span><span class="n">e</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_av_ssm_execute</span><span class="o">+</span><span class="mi">269</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">05</span>  <span class="n">pc</span> <span class="mf">00046f</span><span class="mi">1</span><span class="n">c</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_av_hdl_event</span><span class="o">+</span><span class="mi">159</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">06</span>  <span class="n">pc</span> <span class="mo">0004</span><span class="n">bf02</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_sys_event</span><span class="o">+</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">07</span>  <span class="n">pc</span> <span class="mo">00074</span><span class="n">b70</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">btu_task</span><span class="o">+</span><span class="mi">559</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mi">08</span>  <span class="n">pc</span> <span class="mo">000427</span><span class="mi">84</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">gki_task_entry</span><span class="o">+</span><span class="mi">91</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mi">09</span>  <span class="n">pc</span> <span class="mf">0000e3</span><span class="n">d8</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libc</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">__thread_entry</span><span class="o">+</span><span class="mi">72</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mi">10</span>  <span class="n">pc</span> <span class="mo">0000</span><span class="n">dac4</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libc</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">pthread_create</span><span class="o">+</span><span class="mi">160</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This result can be verified as the same as addr2line:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="err">$</span> <span class="n">arm</span><span class="o">-</span><span class="n">eabi</span><span class="o">-</span><span class="n">addr2line</span> <span class="o">-</span><span class="n">e</span> <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="n">out</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">product</span><span class="o">/</span><span class="n">bg2ct_dmp_emmc</span><span class="o">/</span><span class="n">symbols</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="mo">0004</span><span class="n">c310</span>
</span><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">bta</span><span class="o">/</span><span class="p">.</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">bta_sys_conn</span><span class="p">.</span><span class="nl">c:</span><span class="mi">236</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>Update: Peek stack of a running process</h1>

<p>Android debuggerd can be used to dump a running process's stack:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">ALOGD</span><span class="p">(</span><span class="s">&quot;peeking stack of process %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'><span class="n">kill</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">SIGSTOP</span><span class="p">);</span>
</span><span class='line'><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_ATTACH</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">tombstone_path</span> <span class="o">=</span> <span class="n">engrave_tombstone</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="n">pid</span><span class="p">,</span>
</span><span class='line'>    <span class="mi">0</span><span class="cm">/*no signal*/</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">true</span> <span class="cm">/*dump_sibling_threads*/</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">false</span> <span class="cm">/*not quiet*/</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">detach_failed</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">total_sleep_time_usec</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_DETACH</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">kill</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">SIGCONT</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The stack of main thread of the process will shown in logcat, and all others will be in the tombstone file.
The target process will resume to execution right after the dump stack finished.
This is useful when debugging some real time issues.</p>

<p><blockquote><p></p><footer><strong>source code and test log</strong> <cite><a href='http://yongbingchen.github.com/downloads/code/peek_stack.tar.gz'>yongbingchen.github.com/code/&hellip;</a></cite></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dissect Bluedroid from A2DP: Part V: Key components]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-v-summary/"/>
    <updated>2013-05-07T20:57:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-v-summary</id>
    <content type="html"><![CDATA[<h3>1 Interface and implementation</h3>

<p><font color = "green">bt_interface_t</font>: Android defined, Bluedroid implemented as bluetoothInterface in external/bluetooth/bluedroid/btif/src/bluetooth.c: System control BT adapter.</p>

<p><font color = "green">btav_interface_t</font>: Android defined, Bluedroid implemented as bt_av_interface in external/bluetooth/bluedroid/btif/src/btif_av.c: System control A2DP service.</p>

<p><font color = "green">audio_hw_device and audio_stream_out</font>: Android defined, Bluedroid implemented in external/bluetooth/bluedroid/audio_a2dp_hw/audio_a2dp_hw.c: AudioFlinger use A2DP client as audio output device.</p>

<p><font color = "green">bt_vendor_interface_t</font>: Bluedroid defined, BRCM implemented as BLUETOOTH_VENDOR_LIB_INTERFACE in device/common/libbt/src/bt_vendor_brcm.c: Bluedroid talk to BT char device driver, internal usage only.</p>

<p><font color = "green">tHCI_IF</font>: Bluedroid defined, Bluedroid implemented as hci_h4_func_table in external/bluetooth/bluedroid/hci/src/hci_h4.c: Bluedroid HCI interface (data/cmd/evt in/out), internal usage only.</p>

<p><font color = "green">bt_hc_interface_t</font>: Bluedroid defined, Bluedroid implemented as bluetoothHCLibInterface in external/bluetooth/bluedroid/hci/src/bt_hci_bdroid.c: Wrapper of tHCI_IF, has bt_hc_worker_thread to serialize downcoming HCI commands and read upcoming data/evt from HCI device.</p>

<p><font color = "green">L2CAP </font> layer API, in external/bluetooth/bluedroid/stack/include/l2c_api.h, internal usage only.</p>

<p><font color = "green">LMP </font> API, in external/bluetooth/bluedroid/stack/include/btm_api.h, internal usage only.</p>

<h3>2 Tasks/Roles/Layers</h3>

<p><font color = "green">btif_task</font>, managing all messages being passed Android Bluetooth HAL and BTA.</p>

<p><font color = "green">btu_task</font>, the main task of the Bluetooth Upper Layers unit, routing in/out BT cmd/event/data, processing timeout events.</p>

<p><font color = "green">bt_hc_worker_thread</font>, HCI worker thread, all HCI traffic come through this thread.</p>

<p><font color = "green">userial_read_thread</font>, monitoring incoming packets from BT char device driver, transfering these to bt_hc_worker_thread.</p>

<p><font color = "green">btif_media_task</font>, task for A2DP SBC encoder.</p>

<p><font color = "green">uipc_read_task</font>, A2DP server thread, receive audio input data from A2DP client, feed into btif_media_task.</p>

<p><font color = "green">UIPC/A2DP_CTRL_PATH/A2DP_DATA_PATH</font>, socket based IPC, for A2DP client connect/control to A2DP server.</p>

<p><font color = "green">AVDT_CHAN_SIG/AVDT_CHAN_MEDIA/AVDT_CHAN_REPORT</font>, A2DP channels, communicate with remote device.</p>

<p>Serial Finished.</p>

<p>Reference:
<blockquote><p></p><footer><strong>source code reading note</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-source-code-reading-note.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dissect Bluedroid from A2DP: Part IV: connect and communication]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-iv-a2dp-traffic/"/>
    <updated>2013-05-07T04:50:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-iv-a2dp-traffic</id>
    <content type="html"><![CDATA[<h3>Item A. Connect a remote A2DP device:</h3>

<p><img class="center" src="http://yongbingchen.github.com/images/bluedroid/a2dp_connect.jpg" title="" >
1 Android system will try to reconnect paired A2DP device automatically after BT enable.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mo">04</span><span class="o">-</span><span class="mi">25</span> <span class="mo">01</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mf">31.080</span> <span class="n">D</span><span class="o">/</span><span class="n">BluetoothAdapterService</span><span class="p">(</span> <span class="mi">2093</span><span class="p">)</span><span class="o">:</span> <span class="n">Auto</span> <span class="n">Connecting</span> <span class="n">A2DP</span> <span class="n">Profile</span> <span class="n">with</span> <span class="n">device</span> <span class="mi">50</span><span class="o">:</span><span class="nl">C9:</span><span class="mi">71</span><span class="o">:</span><span class="mi">0</span><span class="nl">D:D2:</span><span class="n">D9</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">packages</span><span class="o">/</span><span class="n">apps</span><span class="o">/</span><span class="n">Bluetooth</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">com_android_bluetooth_a2dp</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'><span class="k">static</span> <span class="n">jboolean</span> <span class="n">connectA2dpNative</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">object</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">address</span><span class="p">)</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">bt_interface_t</span><span class="o">*</span> <span class="n">btInf</span><span class="o">=</span> <span class="n">getBluetoothInterface</span><span class="p">();</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">btav_interface_t</span> <span class="o">*</span><span class="n">sBluetoothA2dpInterface</span> <span class="o">=</span> <span class="p">(</span><span class="n">btav_interface_t</span> <span class="o">*</span><span class="p">)</span><span class="n">btInf</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">get_profile_interface</span><span class="p">(</span><span class="n">BT_PROFILE_ADVANCED_AUDIO_ID</span><span class="p">);</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">sBluetoothA2dpInterface</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">connect</span><span class="p">((</span><span class="n">bt_bdaddr_t</span> <span class="o">*</span><span class="p">)</span><span class="n">addr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">btif</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">btif_av</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>        <span class="n">btif_queue_connect</span><span class="p">(</span><span class="n">UUID_SERVCLASS_AUDIO_SOURCE</span><span class="p">,</span> <span class="n">bd_addr</span><span class="p">,</span> <span class="n">connect_int</span><span class="p">);</span><span class="c1">//This will trigger an event in btu_task, now the caller thread returned.</span>
</span><span class='line'>            <span class="n">GKI_send_msg</span><span class="p">(</span><span class="n">BTIF_TASK</span><span class="p">,</span> <span class="n">BTU_BTIF_MBOX</span><span class="p">,</span> <span class="n">p_msg</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
2 This will later trigger a A2DP server event API_CONNECT_REQ_EVT in state CCB_IDLE_ST:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mo">02</span> <span class="mo">01</span><span class="o">:</span><span class="mi">54</span><span class="o">:</span><span class="mf">33.342</span> <span class="n">I</span><span class="o">/</span><span class="n">bt</span><span class="o">-</span><span class="n">avp</span>  <span class="p">(</span> <span class="mi">2093</span><span class="p">)</span><span class="o">:</span> <span class="n">CCB</span> <span class="n">ccb</span><span class="o">=</span><span class="mi">0</span> <span class="n">event</span><span class="o">=</span><span class="n">API_CONNECT_REQ_EVT</span> <span class="n">state</span><span class="o">=</span><span class="n">CCB_IDLE_ST</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
3 A2DP server handle this event in bellow two actions:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">stack</span><span class="o">/</span><span class="n">avdt</span><span class="o">/</span><span class="n">avdt_ccb</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">129</span> <span class="k">const</span> <span class="n">UINT8</span> <span class="n">avdt_ccb_st_idle</span><span class="p">[][</span><span class="n">AVDT_CCB_NUM_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="mi">130</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Event</span>                      <span class="n">Action</span> <span class="mi">1</span>                    <span class="n">Action</span> <span class="mi">2</span>                    <span class="n">Next</span> <span class="n">state</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="mi">139</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">API_CONNECT_REQ_EVT</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>    <span class="p">{</span><span class="n">AVDT_CCB_SET_CONN</span><span class="p">,</span>          <span class="n">AVDT_CCB_CHAN_OPEN</span><span class="p">,</span>         <span class="n">AVDT_CCB_OPENING_ST</span><span class="p">},</span>
</span><span class='line'><span class="c1">//3.1 Set CCB variables associated with AVDT_ConnectReq().</span>
</span><span class='line'><span class="mi">996</span> <span class="kt">void</span> <span class="n">avdt_ccb_set_conn</span><span class="p">(</span><span class="n">tAVDT_CCB</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">tAVDT_CCB_EVT</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">BTM_SetSecurityLevel</span><span class="p">(</span><span class="n">TRUE</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BTM_SEC_SERVICE_AVDTP</span><span class="p">,</span> <span class="n">p_data</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">connect</span><span class="p">.</span><span class="n">sec_mask</span><span class="p">,</span><span class="n">AVDT_PSM</span><span class="p">,</span> <span class="n">BTM_SEC_PROTO_AVDT</span><span class="p">,</span> <span class="n">AVDT_CHAN_SIG</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//3.2 initiate a signaling channel connection.</span>
</span><span class='line'><span class="mi">87</span> <span class="kt">void</span> <span class="n">avdt_ccb_chan_open</span><span class="p">(</span><span class="n">tAVDT_CCB</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">tAVDT_CCB_EVT</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                <span class="n">BTM_SetOutService</span><span class="p">(</span><span class="n">p_ccb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">peer_addr</span><span class="p">,</span> <span class="n">BTM_SEC_SERVICE_AVDTP</span><span class="p">,</span> <span class="n">AVDT_CHAN_SIG</span><span class="p">);</span>
</span><span class='line'>                <span class="n">avdt_ad_open_req</span><span class="p">(</span><span class="n">AVDT_CHAN_SIG</span><span class="p">,</span> <span class="n">p_ccb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">AVDT_INT</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
4 How L2CAP handle this channel connection:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">stack</span><span class="o">/</span><span class="n">l2cap</span><span class="o">/</span><span class="n">l2c_api</span><span class="p">.</span><span class="n">c</span>                    <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mi">229</span> <span class="n">UINT16</span> <span class="n">L2CA_ErtmConnectReq</span> <span class="p">(</span><span class="n">UINT16</span> <span class="n">psm</span><span class="p">,</span> <span class="n">BD_ADDR</span> <span class="n">p_bd_addr</span><span class="p">,</span> <span class="n">tL2CAP_ERTM_INFO</span> <span class="o">*</span><span class="n">p_ertm_info</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">p_lcb</span> <span class="o">=</span> <span class="n">l2cu_allocate_lcb</span> <span class="p">(</span><span class="n">p_bd_addr</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">);</span>
</span><span class='line'><span class="n">l2cu_create_conn</span><span class="p">(</span><span class="n">p_lcb</span><span class="p">);</span><span class="c1">//This function initiates an acl connection via HCI</span>
</span><span class='line'>    <span class="mi">2180</span> <span class="n">BOOLEAN</span> <span class="n">l2cu_create_conn_after_switch</span> <span class="p">(</span><span class="n">tL2C_LCB</span> <span class="o">*</span><span class="n">p_lcb</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">//external/bluetooth/bluedroid/stack/hcic/hcicmds.c</span>
</span><span class='line'>        <span class="n">btsnd_hcic_create_conn</span> <span class="p">(</span><span class="n">p_lcb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">remote_bd_addr</span><span class="p">,</span><span class="n">HCI_PKT_TYPES_MASK_DM1</span> <span class="o">+</span> <span class="n">HCI_PKT_TYPES_MASK_DH1</span><span class="p">,</span><span class="n">page_scan_rep_mode</span><span class="p">,</span><span class="n">page_scan_mode</span><span class="p">,</span><span class="n">clock_offset</span><span class="p">,</span><span class="n">allow_switch</span><span class="p">));</span>
</span><span class='line'>            <span class="n">HCI_CMD_TO_LOWER</span><span class="p">(</span><span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'>                <span class="c1">//external/bluetooth/bluedroid/main/bte_main.c</span>
</span><span class='line'>                <span class="n">bt_hc_if</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">transmit_buf</span><span class="p">((</span><span class="n">TRANSAC</span><span class="p">)</span><span class="n">p_msg</span><span class="p">,</span> <span class="err">\</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">p_msg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="err">\</span><span class="n">p_msg</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>                    <span class="n">utils_enqueue</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">tx_q</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">transac</span><span class="p">);</span>
</span><span class='line'>                     <span class="n">bthc_signal_event</span><span class="p">(</span><span class="n">HC_EVENT_TX</span><span class="p">);</span>
</span><span class='line'>        <span class="n">btu_start_timer</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">p_lcb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">timer_entry</span><span class="p">,</span> <span class="n">BTU_TTYPE_L2CAP_LINK</span><span class="p">,</span><span class="n">L2CAP_LINK_CONNECT_TOUT</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
5 This command will trigger connection establish process between local and remote device, accomplished by a event-driven state machine in BT stack.</p>

<h3>Item B. a2dp_write data path:</h3>

<p><img class="center" src="http://yongbingchen.github.com/images/bluedroid/a2dp_write.jpg" title="" >
1 A2DP client writes to A2DP data socket will trigger API_WRITE_REQ_EVT in SCB_STREAM_ST state:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mo">02</span> <span class="mo">01</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mf">03.134</span> <span class="n">I</span><span class="o">/</span><span class="n">bt</span><span class="o">-</span><span class="n">avp</span>  <span class="p">(</span> <span class="mi">2139</span><span class="p">)</span><span class="o">:</span> <span class="n">SCB</span> <span class="n">hdl</span><span class="o">=</span><span class="mi">1</span> <span class="n">event</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">API_WRITE_REQ_EVT</span> <span class="n">state</span><span class="o">=</span><span class="n">SCB_STREAM_ST</span>
</span><span class='line'><span class="mi">394</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">state</span> <span class="n">table</span> <span class="k">for</span> <span class="n">streaming</span> <span class="n">state</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="mi">395</span> <span class="k">const</span> <span class="n">UINT8</span> <span class="n">avdt_scb_st_stream</span><span class="p">[][</span><span class="n">AVDT_SCB_NUM_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="mi">396</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">Event</span>                     <span class="n">Action</span> <span class="mi">1</span>                       <span class="n">Action</span> <span class="mi">2</span>                    <span class="n">Next</span> <span class="n">state</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="mi">398</span> <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">API_WRITE_REQ_EVT</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>     <span class="p">{</span><span class="n">AVDT_SCB_HDL_WRITE_REQ</span><span class="p">,</span>        <span class="n">AVDT_SCB_CHK_SND_PKT</span><span class="p">,</span>       <span class="n">AVDT_SCB_STREAM_ST</span><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
2 A2DP server handle this with bellow two actions:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//2.1 build a new media packet and stores it in the SCB.</span>
</span><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">stack</span><span class="o">/</span><span class="n">avdt</span><span class="o">/</span><span class="n">avdt_scb_act</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">1320</span> <span class="kt">void</span> <span class="n">avdt_scb_hdl_write_req</span><span class="p">(</span><span class="n">tAVDT_SCB</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_scb</span><span class="p">,</span> <span class="n">tAVDT_SCB_EVT</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//2.2 send this stored media packet to L2CAP layer.</span>
</span><span class='line'><span class="mi">1921</span> <span class="kt">void</span> <span class="n">avdt_scb_chk_snd_pkt</span><span class="p">(</span><span class="n">tAVDT_SCB</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_scb</span><span class="p">,</span> <span class="n">tAVDT_SCB_EVT</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">p_data</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">avdt_ad_write_req</span><span class="p">(</span><span class="n">AVDT_CHAN_MEDIA</span><span class="p">,</span> <span class="n">p_scb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">p_scb</span><span class="p">,</span> <span class="n">p_pkt</span><span class="p">);</span>
</span><span class='line'>    <span class="n">L2CA_DataWrite</span><span class="p">(</span><span class="n">avdt_cb</span><span class="p">.</span><span class="n">ad</span><span class="p">.</span><span class="n">rt_tbl</span><span class="p">[</span><span class="n">avdt_ccb_to_idx</span><span class="p">(</span><span class="n">p_ccb</span><span class="p">)][</span><span class="n">tcid</span><span class="p">].</span><span class="n">lcid</span><span class="p">,</span> <span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
3 L2CAP to HCI layer
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">bluedroid</span><span class="o">/</span><span class="n">stack</span><span class="o">/</span><span class="n">l2cap</span><span class="o">/</span><span class="n">l2c_api</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">1633</span> <span class="n">UINT8</span> <span class="n">L2CA_DataWrite</span> <span class="p">(</span><span class="n">UINT16</span> <span class="n">cid</span><span class="p">,</span> <span class="n">BT_HDR</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span>
</span><span class='line'><span class="mi">1636</span>     <span class="k">return</span> <span class="n">l2c_data_write</span> <span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">p_data</span><span class="p">,</span> <span class="n">L2CAP_FLUSHABLE_CH_BASED</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                <span class="n">p_ccb</span> <span class="o">=</span> <span class="n">l2cu_find_ccb_by_cid</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">cid</span><span class="p">);</span>
</span><span class='line'>                <span class="n">l2c_csm_execute</span> <span class="p">(</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">L2CEVT_L2CA_DATA_WRITE</span><span class="p">,</span> <span class="n">p_data</span><span class="p">);</span>
</span><span class='line'>                    <span class="mi">935</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">l2c_csm_open</span> <span class="p">(</span><span class="n">tL2C_CCB</span> <span class="o">*</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">UINT16</span> <span class="n">event</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span><span class="c1">//Just consider channel connected state</span>
</span><span class='line'>                    <span class="mi">1050</span>     <span class="k">case</span> <span class="nl">L2CEVT_L2CA_DATA_WRITE:</span>                    <span class="cm">/* Upper layer data to send */</span>
</span><span class='line'>                    <span class="mi">1051</span>         <span class="n">l2c_enqueue_peer_data</span> <span class="p">(</span><span class="n">p_ccb</span><span class="p">,</span> <span class="p">(</span><span class="n">BT_HDR</span> <span class="o">*</span><span class="p">)</span><span class="n">p_data</span><span class="p">);</span>
</span><span class='line'>                    <span class="mi">1052</span>         <span class="n">l2c_link_check_send_pkts</span> <span class="p">(</span><span class="n">p_ccb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">p_lcb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                    <span class="mi">1053</span>         <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                            <span class="n">l2c_link_check_send_pkts</span> <span class="p">(</span><span class="n">p_lcb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                                <span class="n">l2c_link_send_to_lower</span> <span class="p">(</span><span class="n">p_lcb</span><span class="p">,</span> <span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'>                                <span class="mi">1341</span> <span class="err">#</span><span class="k">if</span> <span class="n">BLE_INCLUDED</span> <span class="o">==</span> <span class="n">TRUE</span>
</span><span class='line'>                                <span class="mi">1342</span>         <span class="k">if</span> <span class="p">(</span><span class="n">p_lcb</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">is_ble_link</span><span class="p">)</span>
</span><span class='line'>                                <span class="mi">1344</span>             <span class="n">L2C_LINK_SEND_BLE_ACL_DATA</span><span class="p">(</span><span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'>                                <span class="mi">1346</span>         <span class="k">else</span>
</span><span class='line'>                                <span class="mi">1349</span>             <span class="n">L2C_LINK_SEND_ACL_DATA</span> <span class="p">(</span><span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'>                                                    <span class="n">bte_main_hci_send</span><span class="p">((</span><span class="n">BT_HDR</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="p">),</span> <span class="n">BT_EVT_TO_LM_HCI_ACL</span><span class="p">);</span>
</span><span class='line'>                                                        <span class="n">bt_hc_if</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">transmit_buf</span><span class="p">((</span><span class="n">TRANSAC</span><span class="p">)</span><span class="n">p_msg</span><span class="p">,</span> <span class="err">\</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">p_msg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span><span class="n">p_msg</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>                                                            <span class="n">bluedroid</span><span class="o">/</span><span class="n">hci</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">bt_hci_bdroid</span><span class="p">.</span><span class="nl">c:</span><span class="mi">249</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">transmit_buf</span><span class="p">(</span><span class="n">TRANSAC</span> <span class="n">transac</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p_buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'>                                                                <span class="n">utils_enqueue</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">tx_q</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">transac</span><span class="p">);</span>
</span><span class='line'>                                                                <span class="n">bthc_signal_event</span><span class="p">(</span><span class="n">HC_EVENT_TX</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
4 HCI content write to hardware device driver
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mi">339</span> <span class="k">static</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">bt_hc_worker_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">arg</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="k">if</span> <span class="p">(</span><span class="n">events</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">HC_EVENT_TX</span><span class="p">)</span>
</span><span class='line'>        <span class="n">p_hci_if</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">send</span><span class="p">(</span><span class="n">sending_msg_que</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="mi">593</span> <span class="kt">void</span> <span class="n">hci_h4_send_msg</span><span class="p">(</span><span class="n">HC_BT_HDR</span> <span class="o">*</span><span class="n">p_msg</span><span class="p">)</span>
</span><span class='line'>            <span class="n">bytes_sent</span> <span class="o">=</span> <span class="n">userial_write</span><span class="p">(</span><span class="n">event</span><span class="p">,(</span><span class="n">uint8_t</span> <span class="o">*</span><span class="p">)</span> <span class="n">p</span><span class="p">,</span><span class="n">bytes_to_send</span><span class="p">);</span>
</span><span class='line'>                 <span class="n">ret</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">userial_cb</span><span class="p">.</span><span class="n">fd</span><span class="p">,</span> <span class="n">p_data</span><span class="o">+</span><span class="n">total</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Item C. Incoming data/event path:</h3>

<p>0 Init vendor (BT chip vendor, like MRVL/TI) implement of bt_vendor_interface_t interface.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="mi">187</span> <span class="kt">void</span> <span class="n">init_vnd_if</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">local_bdaddr</span><span class="p">)</span>
</span><span class='line'>        <span class="n">dlhandle</span> <span class="o">=</span> <span class="n">dlopen</span><span class="p">(</span><span class="s">&quot;libbt-vendor.so&quot;</span><span class="p">,</span> <span class="n">RTLD_NOW</span><span class="p">);</span>
</span><span class='line'>        <span class="n">GLOBAL</span> <span class="n">bt_vendor_interface_t</span> <span class="o">*</span><span class="n">bt_vnd_if</span> <span class="o">=</span> <span class="p">(</span><span class="n">bt_vendor_interface_t</span> <span class="o">*</span><span class="p">)</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">dlhandle</span><span class="p">,</span> <span class="s">&quot;BLUETOOTH_VENDOR_LIB_INTERFACE&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">bt_vnd_if</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">vnd_callbacks</span><span class="p">,</span> <span class="n">local_bdaddr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="mi">306</span> <span class="n">uint8_t</span> <span class="n">userial_open</span><span class="p">(</span><span class="n">uint8_t</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">bt_vendor_interface_t</span> <span class="o">*</span> <span class="n">bt_vnd_if</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">op</span><span class="p">(</span><span class="n">BT_VND_OP_USERIAL_OPEN</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">fd_array</span><span class="p">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">bt_vnd_mrvl_if_op</span><span class="p">(</span><span class="n">bt_vendor_opcode_t</span> <span class="n">opcode</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'>                <span class="n">mchar_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/dev/mbtchar0&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span><span class='line'><span class="mi">363</span>     <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">userial_cb</span><span class="p">.</span><span class="n">read_thread</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">thread_attr</span><span class="p">,</span> <span class="n">userial_read_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
1 Got a packet from hardware device driver, in HCI layer.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">bluedroid</span><span class="o">/</span><span class="n">hci</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">userial</span><span class="p">.</span><span class="nl">c:</span><span class="mi">210</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">userial_read_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">arg</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">rx_length</span> <span class="o">=</span> <span class="n">select_read</span><span class="p">(</span><span class="n">userial_cb</span><span class="p">.</span><span class="n">fd</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">READ_LIMIT</span><span class="p">);</span>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">pbuf</span><span class="p">,</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="n">utils_enqueue</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">userial_cb</span><span class="p">.</span><span class="n">rx_q</span><span class="p">),</span> <span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'><span class="c1">//bluedroid/hci/src/bt_hci_bdroid.c</span>
</span><span class='line'><span class="n">bthc_signal_event</span><span class="p">(</span><span class="n">HC_EVENT_RX</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>2 Transfer this to L2CAP layer.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">bluedroid</span><span class="o">/</span><span class="n">hci</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">bt_hci_bdroid</span><span class="p">.</span><span class="n">c</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mi">339</span> <span class="k">static</span> <span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">bt_hc_worker_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">arg</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">events</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">HC_EVENT_RX</span><span class="p">)</span>
</span><span class='line'>     <span class="n">p_hci_if</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">rcv</span><span class="p">();</span>
</span><span class='line'>        <span class="n">uint16_t</span> <span class="n">hci_h4_receive_msg</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="c1">//Construct HCI EVENT/ACL packets and send them to stack</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span> <span class="mi">957</span>             <span class="k">if</span> <span class="p">(</span><span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="o">-&gt;</span><span class="n">event</span> <span class="o">!=</span> <span class="n">MSG_HC_TO_STACK_HCI_ACL</span><span class="p">)</span>
</span><span class='line'> <span class="mi">958</span>                 <span class="n">btsnoop_capture</span><span class="p">(</span><span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">);</span><span class="c1">//dump to HCI trace file/socket.</span>
</span><span class='line'> <span class="mi">960</span>             <span class="k">if</span> <span class="p">(</span><span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="o">-&gt;</span><span class="n">event</span> <span class="o">==</span> <span class="n">MSG_HC_TO_STACK_HCI_EVT</span><span class="p">)</span>
</span><span class='line'> <span class="mi">965</span>                 <span class="n">bt_hc_cbacks</span><span class="o">-&gt;</span><span class="n">data_ind</span><span class="p">((</span><span class="n">TRANSAC</span><span class="p">)</span> <span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">+</span> <span class="n">BT_HC_HDR_SIZE</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>                        <span class="n">bluedroid</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">bte_main</span><span class="p">.</span><span class="nl">c:</span><span class="mi">504</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">data_ind</span><span class="p">(</span><span class="n">TRANSAC</span> <span class="n">transac</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p_buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'>                            <span class="n">GKI_send_msg</span> <span class="p">(</span><span class="n">BTU_TASK</span><span class="p">,</span> <span class="n">BTU_HCI_RCV_MBOX</span><span class="p">,</span> <span class="n">transac</span><span class="p">);</span><span class="c1">//handle in btu_task.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Reference:
<blockquote><p></p><footer><strong>logcat:A2DP</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-init-logcat.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>air log: LMP</strong> <cite><a href='http://yongbingchen.github.com/images/bluedroid/A2DP-connect-LMP.jpg'>yongbingchen.github.com/images/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>air log: L2CAP</strong> <cite><a href='http://yongbingchen.github.com/images/bluedroid/A2DP-connect-L2CAP.jpg'>yongbingchen.github.com/images/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>source code reading note</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-source-code-reading-note.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dissect Bluedroid from A2DP: Part III: Init A2DP Service]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-iii-init-a2dp-service/"/>
    <updated>2013-05-07T04:17:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-iii-init-a2dp-service</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://yongbingchen.github.com/images/bluedroid/init_a2dp_service.jpg" title="" >
1 Get Android defined A2DP interface btav_interface_t from bt_interface_t get_bluetooth_interface().
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mo">04</span><span class="o">-</span><span class="mi">25</span> <span class="mo">01</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mf">30.530</span> <span class="n">I</span><span class="o">/</span><span class="n">BluetoothA2dpServiceJni</span><span class="p">(</span> <span class="mi">2093</span><span class="p">)</span><span class="o">:</span> <span class="nl">classInitNative:</span> <span class="n">succeeds</span>
</span><span class='line'><span class="n">packages</span><span class="o">/</span><span class="n">apps</span><span class="o">/</span><span class="n">Bluetooth</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">com_android_bluetooth_a2dp</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'><span class="mi">137</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">initNative</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">object</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">GLOBAL</span> <span class="k">const</span> <span class="n">btav_interface_t</span> <span class="o">*</span><span class="n">sBluetoothA2dpInterface</span> <span class="o">=</span> <span class="p">(</span><span class="n">btav_interface_t</span> <span class="o">*</span><span class="p">)</span><span class="n">btInf</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">get_profile_interface</span><span class="p">(</span><span class="n">BT_PROFILE_ADVANCED_AUDIO_ID</span><span class="p">);</span>
</span><span class='line'><span class="n">sBluetoothA2dpInterface</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">sBluetoothA2dpCallbacks</span><span class="p">);</span>
</span><span class='line'>    <span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">btif</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">btif_av</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>    <span class="mi">725</span> <span class="k">static</span> <span class="n">bt_status_t</span> <span class="n">init</span><span class="p">(</span><span class="n">btav_callbacks_t</span><span class="o">*</span> <span class="n">callbacks</span> <span class="p">)</span>
</span><span class='line'>        <span class="mi">686</span> <span class="kt">int</span> <span class="n">btif_a2dp_start_media_task</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>            <span class="n">GKI_create_task</span><span class="p">((</span><span class="n">TASKPTR</span><span class="p">)</span><span class="n">btif_media_task</span><span class="p">,</span> <span class="n">A2DP_MEDIA_TASK</span><span class="p">,</span>
</span><span class='line'>        <span class="n">btif_enable_service</span><span class="p">(</span><span class="n">BTA_A2DP_SERVICE_ID</span><span class="p">);</span><span class="c1">//Upon BT enable, BTIF core shall invoke the BTA APIs to enable the profiles</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>2 Init A2DP service by btav_interface_t->init().</p>

<pre><code>* Start a btif_media_task as main loop for A2DP service.
* Open a socket to listen on client's connect request from control channel.
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">btif</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">btif_media_task</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="c1">//Task for SBC encoder.  This task receives an event when the waveIn interface has a pcm data buffer ready.  On receiving the event, handle all ready pcm data buffers.  If stream is started, run the SBC encoder on each chunk of pcm samples and build an output packet consisting of one or more encoded SBC frames.</span>
</span><span class='line'><span class="mi">1066</span> <span class="kt">int</span> <span class="n">btif_media_task</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="mi">1073</span>     <span class="n">btif_media_task_init</span><span class="p">();</span>
</span><span class='line'><span class="mi">1044</span>     <span class="n">UIPC_Init</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="mi">606</span> <span class="n">UDRV_API</span> <span class="kt">void</span> <span class="n">UIPC_Init</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span>
</span><span class='line'>            <span class="mi">569</span> <span class="kt">int</span> <span class="n">uipc_start_main_server_thread</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>                <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">uipc_main</span><span class="p">.</span><span class="n">tid</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="n">pthread_attr_t</span> <span class="o">*</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">uipc_read_task</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">1047</span>     <span class="n">UIPC_Open</span><span class="p">(</span><span class="n">UIPC_CH_ID_AV_CTRL</span> <span class="p">,</span> <span class="n">btif_a2dp_ctrl_cb</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="n">uipc_setup_server_locked</span><span class="p">(</span><span class="n">ch_id</span><span class="p">,</span> <span class="n">A2DP_CTRL_PATH</span><span class="p">,</span> <span class="n">p_cback</span><span class="p">);</span><span class="c1">//This is the control socket that listen on A2DP client.</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="mi">1079</span>     <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="c1">//A2DP event loop</span>
</span><span class='line'><span class="mi">1080</span>     <span class="p">{</span>
</span><span class='line'><span class="mi">1085</span>         <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">BTIF_MEDIA_TASK_CMD</span><span class="p">)</span>
</span><span class='line'><span class="mi">1090</span>                 <span class="n">btif_media_task_handle_cmd</span><span class="p">(</span><span class="n">p_msg</span><span class="p">);</span>
</span><span class='line'><span class="mi">1093</span>
</span><span class='line'><span class="mi">1094</span>         <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">BTIF_MEDIA_TASK_DATA</span><span class="p">)</span>
</span><span class='line'><span class="mi">1099</span>                 <span class="n">btif_media_task_handle_media</span><span class="p">(</span><span class="n">p_msg</span><span class="p">);</span>
</span><span class='line'><span class="mi">1102</span>
</span><span class='line'><span class="mi">1103</span>         <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">BTIF_MEDIA_AA_TASK_TIMER</span><span class="p">)</span>
</span><span class='line'><span class="mi">1105</span>             <span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">advance</span> <span class="n">audio</span> <span class="n">timer</span> <span class="n">expiration</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="mi">1106</span>             <span class="n">btif_media_task_aa_handle_timer</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Reference:
<blockquote><p></p><footer><strong>logcat:A2DP</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-init-logcat.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>air log: LMP</strong> <cite><a href='http://yongbingchen.github.com/images/bluedroid/A2DP-connect-LMP.jpg'>yongbingchen.github.com/images/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>air log: L2CAP</strong> <cite><a href='http://yongbingchen.github.com/images/bluedroid/A2DP-connect-L2CAP.jpg'>yongbingchen.github.com/images/&hellip;</a></cite></footer></blockquote>
<blockquote><p></p><footer><strong>source code reading note</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-source-code-reading-note.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote></p>
]]></content>
  </entry>
  
</feed>
