<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yongbing's Blog]]></title>
  <link href="http://yongbingchen.github.com/atom.xml" rel="self"/>
  <link href="http://yongbingchen.github.com/"/>
  <updated>2015-03-27T22:31:27-07:00</updated>
  <id>http://yongbingchen.github.com/</id>
  <author>
    <name><![CDATA[Yongbing Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[create my own repo to manage bundle of git repositories]]></title>
    <link href="http://yongbingchen.github.com/blog/2015/03/27/create-my-own-repo-to-manage-bundle-of-git-repositories/"/>
    <updated>2015-03-27T17:35:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2015/03/27/create-my-own-repo-to-manage-bundle-of-git-repositories</id>
    <content type="html"><![CDATA[<h2>Create repo manifest:</h2>

<ol>
<li>As gerrit server administrator, create below pojects in gerrit server

<ol>
<li>container //for global access control, choose &#8220;Only serve as parent for other projects&#8221;, unselect &#8220;Create initial empty commit&#8221;</li>
<li>container/repo_1/manifest //repo manifest, access right inherit from &#8220;container&#8221;, unselect &#8220;Only serve as parent for other projects&#8221;, select &#8220;Create initial empty commit&#8221;</li>
<li>container/repo_1/git_one //child project inside the repo, access right inherit from &#8220;container&#8221;, unselect &#8220;Only serve as parent for other projects&#8221;, select &#8220;Create initial empty commit&#8221;.</li>
<li>container/repo_1/git_two</li>
</ol>
</li>
<li>Create my own repo config:

<ol>
<li>on a client working machine, checkout the manifest git first:</li>
</ol>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~<span class="nv">$ </span>git clone ssh://gerrit2@gerritreview.com:29418/container/repo_1/manifest
</span></code></pre></td></tr></table></div></figure>


<p/>
    2. add a new file manifest.xml to the git as below, and merge it to master branch:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest&gt;</span>
</span><span class='line'>        <span class="nt">&lt;remote</span>  <span class="na">name=</span><span class="s">&quot;my_repo&quot;</span>
</span><span class='line'>                <span class="na">fetch=</span><span class="s">&quot;ssh://gerritreview.com:29418/&quot;</span>
</span><span class='line'>                <span class="na">review=</span><span class="s">&quot;http://gerritreview.com/gerrit/&quot;</span>
</span><span class='line'>                <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;default</span> <span class="na">revision=</span><span class="s">&quot;my_working_branch&quot;</span>
</span><span class='line'>                <span class="na">remote=</span><span class="s">&quot;my_repo&quot;</span>
</span><span class='line'>                <span class="na">sync-j=</span><span class="s">&quot;4&quot;</span>
</span><span class='line'>                <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;container/repo_1/git_one&quot;</span> <span class="na">name=</span><span class="s">&quot;container/repo_1/git_one&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;project</span> <span class="na">path=</span><span class="s">&quot;container/repo_1/git_two&quot;</span> <span class="na">name=</span><span class="s">&quot;container/repo_1/git_two&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<p/>
3. On gerrit server, create a working &#8220;Branch Name&#8221; &#8220;my_working_branch&#8221; on these three projects, with &#8220;Initial Revision&#8221; set to &#8220;master&#8221; in https://gerritreview.com/gerrit/#/admin/projects/container/repo_1/${GIT_NAME},branches
<p/>
4. On a client&#8217;s working machine, checkout the repo with below command:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~<span class="nv">$ </span>repo init -u ssh://gerritreview.com:29418/container/repo_1/manifest -b my_working_branch -m manifest.xml --repo-url https://chromium.googlesource.com/external/repo.git --no-repo-verify
</span><span class='line'>~<span class="nv">$ </span>repo sync -j 32
</span></code></pre></td></tr></table></div></figure>

<h2> Setup the access control rules for this repo:</h2>

1. define thress group and their access right: <br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; developers  :can submit CL, checkout code, review +/_ 1  <br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reviewers   :can review +/- 2 <br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; submitters  :can merge CL to working branch <br />
2. implement these rules in gerrit server: <br />
First delete all default access permission granted for &#8220;Registered Users&#8221; from https://gerritreview.com/gerrit/#/admin/projects/All-Projects,access <br />
Then create below access rules for the projects under container: <img src="http://yongbingchen.github.com/images/git/repo/gerrit_server_access_control.jpeg" title="" >

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[config gerrit server behind Apache https reverse-proxy]]></title>
    <link href="http://yongbingchen.github.com/blog/2015/03/27/config-gerrit-server-behind-apache-https-reverse-proxy/"/>
    <updated>2015-03-27T16:20:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2015/03/27/config-gerrit-server-behind-apache-https-reverse-proxy</id>
    <content type="html"><![CDATA[<p>I want to setup a secure gerrit server for a small developer group within intranet, I choose Apache as its reverse-proxy server, and use HTTP as gerrit server&#8217;s auth type, becasue I only want a few selected people to see the server, so no LDAP.</p>

<p>Here&#8217;s the final web view from a registered developer:<br />
<img src="http://yongbingchen.github.com/images/git/repo/sample-cl-webpage.jpg" title="" ></p>

<p>Here&#8217;s the gerrit server config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[gerrit]
</span><span class='line'>  basePath = git
</span><span class='line'>  canonicalWebUrl = https://gerritreview.com/gerrit
</span><span class='line'>[database]
</span><span class='line'>  type = mysql
</span><span class='line'>  hostname = localhost
</span><span class='line'>  database = reviewdb
</span><span class='line'>  username = gerrit2
</span><span class='line'>  password = 12345678
</span><span class='line'>[auth]
</span><span class='line'>  type = HTTP
</span><span class='line'>[sendemail]
</span><span class='line'>  smtpServer = localhost
</span><span class='line'>[container]
</span><span class='line'>  user = gerrit2
</span><span class='line'>  javaHome = /usr/lib/jvm/java-7-openjdk-amd64/jre
</span><span class='line'>[sshd]
</span><span class='line'>  listenAddress = *:29418
</span><span class='line'>[httpd]
</span><span class='line'>  listenUrl = proxy-https://localhost:8080/gerrit
</span><span class='line'>[cache]
</span><span class='line'>  directory = cache
</span><span class='line'>[index]
</span><span class='line'>  type = LUCENE</span></code></pre></td></tr></table></div></figure>


<p>And the changes I made upon default Apache HTTPS site config:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--- /etc/apache2/sites-available/default-ssl.conf    2014-01-07 05:23:42.000000000 -0800
</span><span class='line'>+++ /etc/apache2/sites-available/000-default.conf 2015-03-25 14:41:20.867255345 -0700
</span><span class='line'>@@ -130,6 +130,71 @@
</span><span class='line'>      # MSIE 7 and newer should be able to use keepalive
</span><span class='line'>      BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
</span><span class='line'> 
</span><span class='line'>+               ServerName gerritreview.com
</span><span class='line'>+               ProxyRequests Off
</span><span class='line'>+               ProxyVia Off
</span><span class='line'>+               ProxyPreserveHost On
</span><span class='line'>+               &lt;Proxy *>
</span><span class='line'>+                       Order deny,allow
</span><span class='line'>+                       Allow from all
</span><span class='line'>+               &lt;/Proxy>
</span><span class='line'>+ 
</span><span class='line'>+               &lt;Location />
</span><span class='line'>+                       AuthType Basic
</span><span class='line'>+                       AuthName "Gerrit Code Review"
</span><span class='line'>+                       Require valid-user
</span><span class='line'>+                       AuthBasicProvider file
</span><span class='line'>+                       AuthUserFile /etc/apache2/passwords
</span><span class='line'>+               &lt;/Location>
</span><span class='line'>+
</span><span class='line'>+               AllowEncodedSlashes On
</span><span class='line'>+               SSLProxyEngine On
</span><span class='line'>+               SSLProxyVerify none
</span><span class='line'>+               SSLProxyCheckPeerCN off
</span><span class='line'>+               SSLProxyCheckPeerName off
</span><span class='line'>+ 
</span><span class='line'>+               ProxyPass /gerrit/ http://localhost:8080/gerrit/ nocanon
</span><span class='line'>+               ProxyPassReverse /gerrit/ http://localhost:8080/gerrit/
</span><span class='line'>+               # is this necessary?  
</span><span class='line'>+               Header edit Location "^http:(.*)$" "https:$1"
</span><span class='line'>+
</span><span class='line'>  &lt;/VirtualHost>
</span><span class='line'> &lt;/IfModule></span></code></pre></td></tr></table></div></figure>


<p>After setup, this gerrit server was deployed in a kvm guest machine, connected to its kvm host through an isolated virtual bridge.  Allowing bidirectional access to tcp port 29418 (gerrit ssh), 443 (HTTPS), 25 (sendmail), as below command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#forward kvm host&#39;s incoming (from NIC eth0) tcp dst port 29418 to gerrit server vm.  </span>
</span><span class='line'>iptables -I FORWARD -i eth0 -p tcp -m state --state NEW,RELATED,ESTABLISHED -m tcp -d <span class="nv">$VM_GUEST_IP</span>/32 -dport 29418 -j ACCEPT
</span><span class='line'><span class="c">#any incoming packets from interface eth0, protocol tcp, dst port 29418 will be applied DNAT function (replace the dst addr from kvm host to $VM_GUEST_IP)</span>
</span><span class='line'>iptables -t nat -i eth0 -I PREROUTING -p tcp  --dport 29418 -j DNAT --to <span class="nv">$VM_GUEST_IP</span>:29418
</span><span class='line'><span class="c">#replace any outboud tcp/29418 packet from $VM_GUEST_IP with kvm host&#39;s addr, and push to host&#39;s NIC eth0</span>
</span><span class='line'>iptables -t nat -A POSTROUTING -p tcp -o eth0 -s <span class="nv">$VM_GUEST_IP</span> --sport 29418 -j MASQUERADE
</span><span class='line'><span class="c">#forward outgoing tcp/29418 connect from $VM_GUEST_IP to host&#39;s NIC eth0</span>
</span><span class='line'>iptables -I FORWARD -o eth0 -p tcp -m state --state NEW,RELATED,ESTABLISHED -m tcp -s <span class="nv">$VM_GUEST_IP</span> --sport 29418 -j ACCEPT
</span></code></pre></td></tr></table></div></figure>


<p>Also NAT rules to allow connection from the vm guest (gerrit server) to connect to a NTP server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>iptables -t nat -A POSTROUTING -p udp -s <span class="nv">$VM_GUEST_IP</span>/32 -d 174.137.132.100 -dport 123 -j MASQUERADE
</span><span class='line'>iptables -I FORWARD -p udp -s <span class="nv">$VM_GUEST_IP</span>/32 -d 174.137.132.100/32 -dport 123 -j ACCEPT
</span><span class='line'>iptables -I FORWARD -p udp -d <span class="nv">$VM_GUEST_IP</span>/32 -s 174.137.132.100/32 -dport 123 -j ACCEPT
</span></code></pre></td></tr></table></div></figure>


<h2>Notes:</h2>

<blockquote><p></p><footer><strong>Installation and config note</strong> <cite><a href='http://yongbingchen.github.com/txt/gerrit/install-and-maintain.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>Full Apache HTTPS site config</strong> <cite><a href='http://yongbingchen.github.com/txt/gerrit/000-default.conf'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[decode instruction address in OOPS to C code file:line]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/07/31/decode-instruction-address-in-oops-to-c-code-file-line/"/>
    <updated>2013-07-31T05:47:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/07/31/decode-instruction-address-in-oops-to-c-code-file-line</id>
    <content type="html"><![CDATA[<p>The OOPS message:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">[</span> <span class="mf">2405.090047</span><span class="p">]</span> <span class="n">Unable</span> <span class="n">to</span> <span class="n">handle</span> <span class="n">kernel</span> <span class="n">paging</span> <span class="n">request</span> <span class="n">at</span> <span class="k">virtual</span> <span class="n">address</span> <span class="mo">00</span><span class="mi">8</span><span class="n">b2005</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2405.097586</span><span class="p">]</span> <span class="n">pgd</span> <span class="o">=</span> <span class="mi">80004000</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2405.100427</span><span class="p">]</span> <span class="p">[</span><span class="mo">00</span><span class="mi">8</span><span class="n">b2005</span><span class="p">]</span> <span class="o">*</span><span class="n">pgd</span><span class="o">=</span><span class="mo">00000000</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2405.104187</span><span class="p">]</span> <span class="n">Internal</span> <span class="n">error</span><span class="o">:</span> <span class="n">Oops</span><span class="o">:</span> <span class="mi">5</span> <span class="p">[</span><span class="err">#</span><span class="mi">1</span><span class="p">]</span> <span class="n">PREEMPT</span> <span class="n">SMP</span> <span class="n">ARM</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2405.109673</span><span class="p">]</span> <span class="n">Modules</span> <span class="n">linked</span> <span class="n">in</span><span class="o">:</span> <span class="n">mbtusbchar</span> <span class="n">usbfwdnld</span> <span class="n">fusion</span><span class="p">(</span><span class="n">O</span><span class="p">)</span> <span class="n">gal3d</span> <span class="n">amp_core</span><span class="p">(</span><span class="n">O</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2405.117310</span><span class="p">]</span> <span class="n">CPU</span><span class="o">:</span> <span class="mi">1</span>    <span class="n">Tainted</span><span class="o">:</span> <span class="n">G</span>        <span class="n">W</span>  <span class="n">O</span>  <span class="p">(</span><span class="mf">3.4.50</span><span class="o">+</span> <span class="err">#</span><span class="mi">11</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2405.123072</span><span class="p">]</span> <span class="n">PC</span> <span class="n">is</span> <span class="n">at</span> <span class="n">module_put</span><span class="o">+</span><span class="mh">0x44</span><span class="o">/</span><span class="mh">0x8c</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2405.127219</span><span class="p">]</span> <span class="n">LR</span> <span class="n">is</span> <span class="n">at</span> <span class="n">cdev_put</span><span class="o">+</span><span class="mh">0x24</span><span class="o">/</span><span class="mh">0x28</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2405.131182</span><span class="p">]</span> <span class="n">pc</span> <span class="o">:</span> <span class="p">[</span><span class="o">&lt;</span><span class="mi">8007521</span><span class="n">c</span><span class="o">&gt;</span><span class="p">]</span>    <span class="n">lr</span> <span class="o">:</span> <span class="p">[</span><span class="o">&lt;</span><span class="mi">800</span><span class="n">c97d0</span><span class="o">&gt;</span><span class="p">]</span>    <span class="n">psr</span><span class="o">:</span> <span class="mi">20000013</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2406.111129</span><span class="p">]</span> <span class="n">Backtrace</span><span class="o">:</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2406.113680</span><span class="p">]</span> <span class="p">[</span><span class="o">&lt;</span><span class="mi">800751</span><span class="n">d8</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">(</span><span class="n">module_put</span><span class="o">+</span><span class="mh">0x0</span><span class="o">/</span><span class="mh">0x8c</span><span class="p">)</span> <span class="n">from</span> <span class="p">[</span><span class="o">&lt;</span><span class="mi">800</span><span class="n">c97d0</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">(</span><span class="n">cdev_put</span><span class="o">+</span><span class="mh">0x24</span><span class="o">/</span><span class="mh">0x28</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2406.121764</span><span class="p">]</span>  <span class="n">r4</span><span class="o">:</span><span class="mi">45</span><span class="n">a8e010</span> <span class="n">r3</span><span class="o">:</span><span class="n">ffffffff</span>
</span><span class='line'><span class="p">[</span> <span class="mf">2406.125491</span><span class="p">]</span> <span class="p">[</span><span class="o">&lt;</span><span class="mi">800</span><span class="n">c97ac</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">(</span><span class="n">cdev_put</span><span class="o">+</span><span class="mh">0x0</span><span class="o">/</span><span class="mh">0x28</span><span class="p">)</span> <span class="n">from</span> <span class="p">[</span><span class="o">&lt;</span><span class="mi">800</span><span class="n">c7410</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">(</span><span class="n">fput</span><span class="o">+</span><span class="mh">0x21c</span><span class="o">/</span><span class="mh">0x22c</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Method A: Recompile vmlinux or failed module with debug info enabled if possible (CONFIG_DEBUG_INFO=y), then gdb can give out the C source code line of the failed instruction:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">make</span> <span class="err">$</span><span class="n">MY_DEFAULT_CONFIG_FILE</span> <span class="o">-</span><span class="n">C</span> <span class="err">$</span><span class="n">LINUX_ROOT_DIR</span> <span class="n">CROSS_COMPILE</span><span class="o">=</span><span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnueabi</span><span class="o">-</span> <span class="n">ARCH</span><span class="o">=</span><span class="n">arm</span>
</span><span class='line'><span class="err">$</span> <span class="n">make</span> <span class="err">$</span><span class="n">MY_UIMAGE_NAME</span> <span class="o">-</span><span class="n">C</span> <span class="err">$</span><span class="n">LINUX_ROOT_DIR</span> <span class="n">CROSS_COMPILE</span><span class="o">=</span><span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnueabi</span><span class="o">-</span> <span class="n">ARCH</span><span class="o">=</span><span class="n">arm</span> <span class="n">CONFIG_DEBUG_INFO</span><span class="o">=</span><span class="n">y</span> <span class="o">-</span><span class="n">j32</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recompile individual module if needed:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">make</span> <span class="n">modules</span> <span class="o">-</span><span class="n">C</span> <span class="err">$</span><span class="n">LINUX_ROOT_DIR</span> <span class="n">CROSS_COMPILE</span><span class="o">=</span><span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">gnueabi</span><span class="o">-</span> <span class="n">ARCH</span><span class="o">=</span><span class="n">arm</span> <span class="n">CONFIG_DEBUG_INFO</span><span class="o">=</span><span class="n">y</span> <span class="o">-</span><span class="n">j32</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use gdb to get C source file:line info from given instruction address:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">androideabi</span><span class="o">-</span><span class="n">gdb</span> <span class="err">–</span><span class="n">f</span> <span class="n">vmlinux</span>
</span><span class='line'><span class="n">Reading</span> <span class="n">symbols</span> <span class="n">from</span> <span class="n">linux</span><span class="o">/</span><span class="n">vmlinux</span><span class="p">...</span><span class="n">done</span><span class="p">.</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">list</span> <span class="o">*</span><span class="p">(</span><span class="n">module_put</span><span class="o">+</span><span class="mh">0x44</span><span class="p">)</span>
</span><span class='line'><span class="mh">0x80073964</span> <span class="n">is</span> <span class="n">in</span> <span class="n">module_put</span> <span class="p">(</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">942</span><span class="p">).</span>
</span><span class='line'><span class="mi">937</span>     <span class="kt">void</span> <span class="n">module_put</span><span class="p">(</span><span class="k">struct</span> <span class="n">module</span> <span class="o">*</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'><span class="mi">938</span>     <span class="p">{</span>
</span><span class='line'><span class="mi">939</span>             <span class="k">if</span> <span class="p">(</span><span class="n">module</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="mi">940</span>                     <span class="n">preempt_disable</span><span class="p">();</span>
</span><span class='line'><span class="mi">941</span>                     <span class="nf">smp_wmb</span><span class="p">();</span> <span class="cm">/* see comment in module_refcount */</span>
</span><span class='line'><span class="mi">942</span>                     <span class="nf">__this_cpu_inc</span><span class="p">(</span><span class="n">module</span><span class="o">-&gt;</span><span class="n">refptr</span><span class="o">-&gt;</span><span class="n">decs</span><span class="p">);</span>
</span><span class='line'><span class="mi">943</span>
</span><span class='line'><span class="mi">944</span>                     <span class="nf">trace_module_put</span><span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">_RET_IP_</span><span class="p">);</span>
</span><span class='line'><span class="mi">945</span>                     <span class="cm">/* Maybe they&#39;re waiting for us to drop reference? */</span>
</span><span class='line'><span class="mi">946</span>                     <span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">module_is_live</span><span class="p">(</span><span class="n">module</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">disas</span> <span class="p">(</span><span class="n">module_put</span><span class="o">+</span><span class="mh">0x44</span><span class="p">)</span>
</span><span class='line'><span class="n">Dump</span> <span class="n">of</span> <span class="n">assembler</span> <span class="n">code</span> <span class="k">for</span> <span class="n">function</span> <span class="n">module_put</span><span class="o">:</span>
</span><span class='line'>   <span class="mh">0x80073960</span> <span class="o">&lt;+</span><span class="mi">64</span><span class="o">&gt;:</span>    <span class="n">add</span>     <span class="n">r3</span><span class="p">,</span> <span class="n">r3</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span>
</span><span class='line'>   <span class="mh">0x80073964</span> <span class="o">&lt;+</span><span class="mi">68</span><span class="o">&gt;:</span>    <span class="n">ldr</span>     <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r3</span><span class="p">,</span> <span class="n">r2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Method B: If can not recompile the vmlinux/module, but the problematic vmlinux/module file is available, use objdump to get the assembly line, but no C source line available.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">androideabi</span><span class="o">-</span><span class="n">objdump</span> <span class="o">-</span><span class="n">dSl</span> <span class="n">vmlinux</span> <span class="o">&gt;</span><span class="n">vmlinux</span><span class="p">.</span><span class="n">disasm</span>
</span></code></pre></td></tr></table></div></figure>


<p>module_put+0x44 = 0x800751d8 + 0x44 = 0x8007521c:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="mi">800751</span><span class="n">d8</span> <span class="o">&lt;</span><span class="n">module_put</span><span class="o">&gt;:</span>
</span><span class='line'><span class="n">module_put</span><span class="p">()</span><span class="o">:</span>
</span><span class='line'><span class="mi">8007521</span><span class="n">c</span><span class="o">:</span>       <span class="n">e7931002</span>        <span class="n">ldr</span>     <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r3</span><span class="p">,</span> <span class="n">r2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Compared with method A, method B get the same instruction line.</p>

<p>Appendix: only for comparison/reference: use objdump to decode an object file with debug info:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">arm</span><span class="o">-</span><span class="n">linux</span><span class="o">-</span><span class="n">androideabi</span><span class="o">-</span><span class="n">objdump</span> <span class="o">-</span><span class="n">dSlr</span> <span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">o</span> <span class="o">&gt;</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">disasm</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check if module_put+0x44 = 0xf28+0x44 = 0xf6c point to the same C source line and assembly line:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="mf">00000f</span><span class="mi">28</span> <span class="o">&lt;</span><span class="n">module_put</span><span class="o">&gt;:</span>
</span><span class='line'>  <span class="n">module_put</span><span class="p">()</span><span class="o">:</span>
</span><span class='line'>  <span class="n">linux</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">938</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">EXPORT_SYMBOL</span><span class="p">(</span><span class="n">try_module_get</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">module_put</span><span class="p">(</span><span class="k">struct</span> <span class="n">module</span> <span class="o">*</span><span class="n">module</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>       <span class="nl">f28:</span>       <span class="n">e1a0c00d</span>        <span class="n">mov</span>     <span class="n">ip</span><span class="p">,</span> <span class="n">sp</span>
</span><span class='line'>       <span class="nl">f2c:</span>       <span class="n">e92dd818</span>        <span class="n">push</span>    <span class="p">{</span><span class="n">r3</span><span class="p">,</span> <span class="n">r4</span><span class="p">,</span> <span class="n">fp</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">lr</span><span class="p">,</span> <span class="n">pc</span><span class="p">}</span>
</span><span class='line'>       <span class="nl">f30:</span>       <span class="n">e24cb004</span>        <span class="n">sub</span>     <span class="n">fp</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span>
</span><span class='line'>  <span class="n">linux</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">939</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">module</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nl">f34:</span>       <span class="n">e3500000</span>        <span class="n">cmp</span>     <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">0</span>
</span><span class='line'>       <span class="nl">f38:</span>       <span class="mi">089</span><span class="n">da818</span>        <span class="n">ldmeq</span>   <span class="n">sp</span><span class="p">,</span> <span class="p">{</span><span class="n">r3</span><span class="p">,</span> <span class="n">r4</span><span class="p">,</span> <span class="n">fp</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="n">pc</span><span class="p">}</span>
</span><span class='line'>  <span class="n">current_thread_info</span><span class="p">()</span><span class="o">:</span>
</span><span class='line'>  <span class="n">linux</span><span class="o">/</span><span class="n">arch</span><span class="o">/</span><span class="n">arm</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">asm</span><span class="o">/</span><span class="n">thread_info</span><span class="p">.</span><span class="n">h</span><span class="o">:</span><span class="mi">97</span>
</span><span class='line'>       <span class="nl">f3c:</span>       <span class="n">e1a0300d</span>        <span class="n">mov</span>     <span class="n">r3</span><span class="p">,</span> <span class="n">sp</span>
</span><span class='line'>       <span class="nl">f40:</span>       <span class="n">e3c34d7f</span>        <span class="n">bic</span>     <span class="n">r4</span><span class="p">,</span> <span class="n">r3</span><span class="p">,</span> <span class="err">#</span><span class="mi">8128</span>   <span class="p">;</span> <span class="mh">0x1fc0</span>
</span><span class='line'>       <span class="nl">f44:</span>       <span class="n">e3c4403f</span>        <span class="n">bic</span>     <span class="n">r4</span><span class="p">,</span> <span class="n">r4</span><span class="p">,</span> <span class="err">#</span><span class="mi">63</span>     <span class="p">;</span> <span class="mh">0x3f</span>
</span><span class='line'>  <span class="n">module_put</span><span class="p">()</span><span class="o">:</span>
</span><span class='line'>  <span class="n">linux</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">940</span>
</span><span class='line'>                  <span class="n">preempt_disable</span><span class="p">();</span>
</span><span class='line'>       <span class="nl">f48:</span>       <span class="n">e5943004</span>        <span class="n">ldr</span>     <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r4</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'>       <span class="nl">f4c:</span>       <span class="n">e2833001</span>        <span class="n">add</span>     <span class="n">r3</span><span class="p">,</span> <span class="n">r3</span><span class="p">,</span> <span class="err">#</span><span class="mi">1</span>
</span><span class='line'>       <span class="nl">f50:</span>       <span class="n">e5843004</span>        <span class="n">str</span>     <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r4</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'>  <span class="n">linux</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">941</span>
</span><span class='line'>                  <span class="n">smp_wmb</span><span class="p">();</span> <span class="cm">/* see comment in module_refcount */</span>
</span><span class='line'>       <span class="nl">f54:</span>       <span class="n">f57ff05f</span>        <span class="n">dmb</span>     <span class="n">sy</span>
</span><span class='line'>  <span class="n">linux</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">942</span>
</span><span class='line'>                  <span class="n">__this_cpu_inc</span><span class="p">(</span><span class="n">module</span><span class="o">-&gt;</span><span class="n">refptr</span><span class="o">-&gt;</span><span class="n">decs</span><span class="p">);</span>
</span><span class='line'>       <span class="nl">f58:</span>       <span class="n">e59f2050</span>        <span class="n">ldr</span>     <span class="n">r2</span><span class="p">,</span> <span class="p">[</span><span class="n">pc</span><span class="p">,</span> <span class="err">#</span><span class="mi">80</span><span class="p">]</span>   <span class="p">;</span> <span class="n">fb0</span> <span class="o">&lt;</span><span class="n">module_put</span><span class="o">+</span><span class="mh">0x88</span><span class="o">&gt;</span>
</span><span class='line'>       <span class="nl">f5c:</span>       <span class="n">e5941014</span>        <span class="n">ldr</span>     <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r4</span><span class="p">,</span> <span class="err">#</span><span class="mi">20</span><span class="p">]</span>
</span><span class='line'>       <span class="nl">f60:</span>       <span class="n">e5903138</span>        <span class="n">ldr</span>     <span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mi">312</span><span class="p">]</span>  <span class="p">;</span> <span class="mh">0x138</span>
</span><span class='line'>       <span class="nl">f64:</span>       <span class="n">e7922101</span>        <span class="n">ldr</span>     <span class="n">r2</span><span class="p">,</span> <span class="p">[</span><span class="n">r2</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="n">lsl</span> <span class="err">#</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>       <span class="nl">f68:</span>       <span class="n">e2833004</span>        <span class="n">add</span>     <span class="n">r3</span><span class="p">,</span> <span class="n">r3</span><span class="p">,</span> <span class="err">#</span><span class="mi">4</span>
</span><span class='line'>       <span class="nl">f6c:</span>       <span class="n">e7931002</span>        <span class="n">ldr</span>     <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r3</span><span class="p">,</span> <span class="n">r2</span><span class="p">]</span>
</span><span class='line'>       <span class="nl">f70:</span>       <span class="n">e2811001</span>        <span class="n">add</span>     <span class="n">r1</span><span class="p">,</span> <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mi">1</span>
</span><span class='line'>       <span class="nl">f74:</span>       <span class="n">e7831002</span>        <span class="n">str</span>     <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r3</span><span class="p">,</span> <span class="n">r2</span><span class="p">]</span>
</span><span class='line'>  <span class="n">linux</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">module</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">946</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[atomic file writing]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/07/24/atomic-file-write/"/>
    <updated>2013-07-24T05:16:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/07/24/atomic-file-write</id>
    <content type="html"><![CDATA[<p>QA reported a bug, sometimes when power cycle target board right after pairing a bluetooth device, the whole bluetooth paring info lost.
I found out the root cause is that the configure file of bluedroid lost all content in this case.
Turned out the bluedroid configure file writing operation is not atomic.
I came up with a revised file writing process, to guarantee it&#8217;s atomic:</p>

<ol>
<li>copy the configure file to a temporary file.</li>
<li>write the update content to the temporary file.</li>
<li>fsync the temporary file. (the step that bluedroid missed)</li>
<li>rename the temporary file to configure file.</li>
</ol>


<p>Because rename is atomic, and all steps before it are revertable (will not affect the configure file), so the whole process is atomic.</p>

<figure class='code'><figcaption><span> (atomic_write.c)</span> <a href='http://yongbingchen.github.com/downloads/code/atomic_write.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">﻿</span><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Copyright (C) 2013 Yongbing Chen &lt;yongbing.chen.wh@gmail.com&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span>
</span><span class='line'><span class="cm"> * you may not use this file except in compliance with the License.</span>
</span><span class='line'><span class="cm"> * You may obtain a copy of the License at</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="cm"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="cm"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="cm"> * See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="cm"> * limitations under the License.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CHECK_RESULT(x) \</span>
</span><span class='line'><span class="cp"> do { \</span>
</span><span class='line'><span class="cp">     if (x != 0){ \</span>
</span><span class='line'><span class="cp">         printf(&quot;error %s\n&quot;, strerror(errno)); \</span>
</span><span class='line'><span class="cp">         return -1; \</span>
</span><span class='line'><span class="cp">     } \</span>
</span><span class='line'><span class="cp"> }while (0);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef TEMP_FAILURE_RETRY </span>
</span><span class='line'><span class="cp">#define TEMP_FAILURE_RETRY(x) \</span>
</span><span class='line'><span class="cp"> ({ \</span>
</span><span class='line'><span class="cp">  int _result; \</span>
</span><span class='line'><span class="cp">  do _result = (int) (x); \</span>
</span><span class='line'><span class="cp">  while (_result == -1 &amp;&amp; errno == EINTR); \</span>
</span><span class='line'><span class="cp">  _result; \</span>
</span><span class='line'><span class="cp">  })</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">copy_file</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">src_file</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">dst_file</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">FILE</span> <span class="o">*</span><span class="n">fp1</span><span class="p">,</span> <span class="o">*</span><span class="n">fp2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fp1</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">src_file</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">fp1</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;open %s error %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">src_file</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fp2</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">dst_file</span><span class="p">,</span><span class="s">&quot;w&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">fp2</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;open %s error %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">dst_file</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span> <span class="n">fclose</span><span class="p">(</span><span class="n">fp1</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fseek</span><span class="p">(</span><span class="n">fp1</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="n">SEEK_END</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">file_size</span> <span class="o">=</span> <span class="n">ftell</span><span class="p">(</span><span class="n">fp1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fseek</span><span class="p">(</span><span class="n">fp1</span><span class="p">,</span> <span class="mi">0</span> <span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">file_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">fclose</span><span class="p">(</span><span class="n">fp1</span><span class="p">);</span> <span class="n">fclose</span><span class="p">(</span><span class="n">fp2</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">file_size</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">buffer</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;error %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span> <span class="n">fclose</span><span class="p">(</span><span class="n">fp1</span><span class="p">);</span> <span class="n">fclose</span><span class="p">(</span><span class="n">fp2</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;copy len %d from %s to %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">file_size</span><span class="p">,</span> <span class="n">src_file</span><span class="p">,</span> <span class="n">dst_file</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">fread</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">file_size</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fp1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ret %d, error %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ret</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">fwrite</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">file_size</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fp2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;ret %d, error %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ret</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">error</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nl">error:</span>
</span><span class='line'>  <span class="n">fclose</span><span class="p">(</span><span class="n">fp1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fclose</span><span class="p">(</span><span class="n">fp2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">update_config_to_tmp_file</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">curr_file</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">file_name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_APPEND</span> <span class="o">|</span> <span class="n">O_RDWR</span><span class="p">,</span> <span class="mo">0660</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">fd</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">access</span><span class="p">(</span><span class="n">curr_file</span><span class="p">,</span>  <span class="n">F_OK</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>          <span class="n">CHECK_RESULT</span><span class="p">(</span><span class="n">copy_file</span><span class="p">(</span><span class="n">curr_file</span><span class="p">,</span> <span class="n">file_name</span><span class="p">));</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">test_data</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;writing data %d to config file %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">test_data</span><span class="p">,</span> <span class="n">file_name</span><span class="p">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">data_write</span> <span class="o">=</span> <span class="n">TEMP_FAILURE_RETRY</span><span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">test_data</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">test_data</span><span class="p">)));</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">data_write</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">data_write</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">test_data</span><span class="p">)){</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s failed len:%d %s&quot;</span><span class="p">,</span><span class="n">__func__</span><span class="p">,</span> <span class="n">data_write</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>          <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">sync_conf_file</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">file_name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">fd</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">ret</span> <span class="o">=</span> <span class="n">fsync</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">atomic_update_config_file</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">file_name</span> <span class="o">=</span> <span class="s">&quot;config&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">file_name_new</span> <span class="o">=</span> <span class="s">&quot;config.new&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CHECK_RESULT</span><span class="p">(</span><span class="n">update_config_to_tmp_file</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">file_name_new</span><span class="p">));</span><span class="c1">//open, write, close inside this operation.</span>
</span><span class='line'>  <span class="n">CHECK_RESULT</span><span class="p">(</span><span class="n">sync_conf_file</span><span class="p">(</span><span class="n">file_name_new</span><span class="p">));</span><span class="c1">//open, fsync, close to achive a sync.</span>
</span><span class='line'>  <span class="n">CHECK_RESULT</span><span class="p">(</span><span class="n">rename</span><span class="p">(</span><span class="n">file_name_new</span><span class="p">,</span> <span class="n">file_name</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">atomic_update_config_file</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;update config failed, keeping original one.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<blockquote><p></p><footer><strong>atomic unix methods</strong> <cite><a href='http://rcrowley.org/2010/01/06/things-unix-can-do-atomically.html'>rcrowley.org/2010/01/06/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>man fsync</strong> <cite><a href='http://linux.die.net/man/3/fsync'>linux.die.net/man/3/fsync/&hellip;</a></cite></footer></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Bluetooth: pairing a HID device]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/07/12/android-bluetooth-pair-a-hid-device/"/>
    <updated>2013-07-12T23:06:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/07/12/android-bluetooth-pair-a-hid-device</id>
    <content type="html"><![CDATA[<p><img src="http://yongbingchen.github.com/images/android_bt/android-pair-hid-device.jpg" title="" ></p>

<ol>
<li>User started scanning from Bluetooth Settings UI, Android Bluetooth service responded to this request, calling bluedroid to start discovery.</li>
<li>Bluedroid found nearby devices in discovery mode, reported them through device found callback.</li>
<li>User selected one device from found devices, started to pairing it, Android Bluetooth service called bluedroid to creat bond with it.</li>
<li>Bluedroid requested PIN code from end user (simple secure pairing mode has different procedure).</li>
<li>Bluedroid started SDP process to find remote device&#8217;s UUID.</li>
<li>After SDP finished, bluedroid called remote device property changed on UUID changed to notify Android.</li>
<li>Android received the event, then HID profile service started to connect it. Without this SDP event, the pair will fail due to no further action over L2CAP anymore, see <a href ="http://yongbingchen.github.com/logs/andoird-hid/SDP-fail-cause-HID-pair-fail.txt ">pairing failed by SDP</a> for example.</li>
<li>In HID profile connection process, bluedroid conducted another round of SDP, fetched HID descriptor from remote device, created hidraw and input device file for the new remote device, through uhid interface, the remote device was ready to use from that point.</li>
</ol>


<p>Logs and call stack:</p>

<blockquote><p></p><footer><strong>scan to found device cb</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/start-discovery-to-found-device-callback.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>


<p></p>

<blockquote><p></p><footer><strong>pair to bonded cb</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/start-pairing-to-bonded.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>


<p></p>

<blockquote><p></p><footer><strong>on UUID changed to HID connect</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/onUuidChanged-to-HID-connect.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>


<p></p>

<p>Full logs:</p>

<blockquote><p></p><footer><strong>scan</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/logs/scan.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>


<p></p>

<blockquote><p></p><footer><strong>pair</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/logs/pair.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>


<p></p>

<blockquote><p></p><footer><strong>hcidump</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/logs/hcidump.txt'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>


<p></p>

<blockquote><p></p><footer><strong>air log</strong> <cite><a href='http://yongbingchen.github.com/logs/andoird-hid/logs/scan-pair.cfa'>yongbingchen.github.com/logs/&hellip;</a></cite></footer></blockquote>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[misc code samples]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/06/30/misc-code-samples/"/>
    <updated>2013-06-30T22:49:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/06/30/misc-code-samples</id>
    <content type="html"><![CDATA[<p>1 inotify: monitoring hidraw device file add/remove events:</p>

<figure class='code'><figcaption><span> (inotify-example.c)</span> <a href='http://yongbingchen.github.com/downloads/code/inotify-example.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Copyright (C) 2005 The Android Open Source Project</span>
</span><span class='line'><span class="cm"> * Copyright (C) 2013 Yongbing Chen &lt;yongbing.chen.wh@gmail.com&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span>
</span><span class='line'><span class="cm"> * you may not use this file except in compliance with the License.</span>
</span><span class='line'><span class="cm"> * You may obtain a copy of the License at</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="cm"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="cm"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="cm"> * See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="cm"> * limitations under the License.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;poll.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/epoll.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/inotify.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">EPOLL_ID_INOTIFY</span> <span class="o">=</span> <span class="mh">0x80000001</span><span class="p">;</span>
</span><span class='line'><span class="cp">#define MONITORING_DIR &quot;/dev&quot;</span>
</span><span class='line'><span class="cp">#define HIDRAW_DEV_FILE_PREFIX &quot;hidraw&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">init_epoll_fd</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">epoll_fd</span> <span class="o">=</span> <span class="n">epoll_create</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">epoll_fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;epoll_crate failed %s&quot;</span><span class="p">,</span><span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">epoll_fd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">init_inotify</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span> <span class="n">dev_path</span><span class="p">,</span> <span class="kt">int</span> <span class="n">epoll_fd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">inotify_fd</span> <span class="o">=</span> <span class="n">inotify_init</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">inotify_fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;inotify_init failed, errno %s&quot;</span><span class="p">,</span><span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">inotify_add_watch</span><span class="p">(</span><span class="n">inotify_fd</span><span class="p">,</span> <span class="n">dev_path</span><span class="p">,</span> <span class="n">IN_DELETE</span> <span class="o">|</span> <span class="n">IN_CREATE</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">result</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Could not register INotify for %s  errno %s&quot;</span><span class="p">,</span> <span class="n">dev_path</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">inotify_fd</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">inotify_fd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">add_inotify_to_epoll</span><span class="p">(</span><span class="kt">int</span> <span class="n">epoll_fd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">inotify_fd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">epoll_event</span> <span class="n">event_item</span><span class="p">;</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event_item</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">event_item</span><span class="p">));</span>
</span><span class='line'>  <span class="n">event_item</span><span class="p">.</span><span class="n">events</span> <span class="o">=</span> <span class="n">EPOLLIN</span><span class="p">;</span>
</span><span class='line'>  <span class="n">event_item</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">u32</span> <span class="o">=</span> <span class="n">EPOLL_ID_INOTIFY</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">epoll_ctl</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">,</span> <span class="n">EPOLL_CTL_ADD</span><span class="p">,</span> <span class="n">inotify_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">event_item</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Could not add INotify to epoll instance.  errno %s&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">process_add_event</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">hidraw_file_name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s, %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">hidraw_file_name</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//may add the file to epoll here.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">process_remove_event</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">hidraw_file_name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s, %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">hidraw_file_name</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//may remove the file from epoll here.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Cite from Android EventHub.cpp</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="nf">read_inotify</span><span class="p">(</span><span class="kt">int</span> <span class="n">inotify_fd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rc</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">devname</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">event_buf</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">event_size</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">event_pos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">inotify_event</span> <span class="o">*</span><span class="n">event</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;read_inotify fd: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">inotify_fd</span><span class="p">);</span>
</span><span class='line'>    <span class="n">rc</span> <span class="o">=</span> <span class="n">TEMP_FAILURE_RETRY</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">inotify_fd</span><span class="p">,</span> <span class="n">event_buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">event_buf</span><span class="p">)));</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">rc</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">event</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;could not get event, %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="n">devname</span><span class="p">,</span> <span class="n">MONITORING_DIR</span><span class="p">);</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="n">devname</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">devname</span><span class="p">);</span>
</span><span class='line'>    <span class="o">*</span><span class="n">filename</span><span class="o">++</span> <span class="o">=</span> <span class="sc">&#39;/&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">rc</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">event</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">event</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">inotify_event</span> <span class="o">*</span><span class="p">)(</span><span class="n">event_buf</span> <span class="o">+</span> <span class="n">event_pos</span><span class="p">);</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d: %08x </span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">wd</span><span class="p">,</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">mask</span><span class="p">,</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">?</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">:</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">strncmp</span><span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">HIDRAW_DEV_FILE_PREFIX</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">HIDRAW_DEV_FILE_PREFIX</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">strcpy</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">event</span><span class="o">-&gt;</span><span class="n">mask</span> <span class="o">&amp;</span> <span class="n">IN_CREATE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">process_add_event</span><span class="p">(</span><span class="n">devname</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">process_remove_event</span><span class="p">(</span><span class="n">devname</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">event_size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">event</span><span class="p">)</span> <span class="o">+</span> <span class="n">event</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">;</span>
</span><span class='line'>        <span class="n">rc</span> <span class="o">-=</span> <span class="n">event_size</span><span class="p">;</span>
</span><span class='line'>        <span class="n">event_pos</span> <span class="o">+=</span> <span class="n">event_size</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">process_inode_event</span><span class="p">(</span><span class="k">struct</span> <span class="n">epoll_event</span> <span class="o">*</span><span class="n">events</span><span class="p">,</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">event_counts</span><span class="p">,</span> <span class="kt">int</span> <span class="n">inotify_fd</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">event_counts</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">events</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">.</span><span class="n">u32</span> <span class="o">==</span> <span class="n">EPOLL_ID_INOTIFY</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">events</span><span class="o">-&gt;</span><span class="n">events</span> <span class="o">&amp;</span> <span class="n">EPOLLIN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">read_inotify</span><span class="p">(</span><span class="n">inotify_fd</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="n">printf</span><span class="p">(</span><span class="s">&quot;received unexpected epoll event 0x%08x for inotify.&quot;</span><span class="p">,</span> <span class="n">events</span><span class="o">-&gt;</span><span class="n">events</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">events</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">epoll_fd</span> <span class="o">=</span> <span class="n">init_epoll_fd</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">epoll_fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">inotify_fd</span> <span class="o">=</span> <span class="n">init_inotify</span><span class="p">(</span><span class="n">MONITORING_DIR</span><span class="p">,</span> <span class="n">epoll_fd</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">inotify_fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">add_inotify_to_epoll</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">,</span> <span class="n">inotify_fd</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">);</span><span class="n">close</span><span class="p">(</span><span class="n">inotify_fd</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">EPOLL_MAX_EVENTS</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">epoll_event</span> <span class="n">epoll_events</span><span class="p">[</span><span class="n">EPOLL_MAX_EVENTS</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">TEMP_FAILURE_RETRY</span><span class="p">(</span><span class="n">epoll_wait</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">,</span> <span class="n">epoll_events</span><span class="p">,</span> <span class="n">EPOLL_MAX_EVENTS</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">rc</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;poll failed errno=%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>          <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">process_inode_event</span><span class="p">(</span><span class="n">epoll_events</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">inotify_fd</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">inotify_fd</span><span class="p">);</span>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __RUNNING_LOG</span>
</span><span class='line'> <span class="mi">130</span><span class="o">|</span><span class="n">shell</span><span class="err">@</span><span class="n">android</span><span class="o">:/</span><span class="n">data</span><span class="o">/</span><span class="n">app</span> <span class="err">#</span> <span class="p">.</span><span class="o">/</span><span class="n">test_inotify</span>
</span><span class='line'><span class="p">[</span> <span class="mf">4998.540741</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">USB</span> <span class="n">disconnect</span><span class="p">,</span> <span class="n">device</span> <span class="n">number</span> <span class="mi">3</span>
</span><span class='line'><span class="n">read_inotify</span> <span class="n">fd</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="mo">00000200</span> <span class="s">&quot;hidraw0&quot;</span>
</span><span class='line'><span class="n">Removing</span> <span class="n">device</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">hidraw0</span><span class="err">&#39;</span> <span class="n">due</span> <span class="n">to</span> <span class="n">inotify</span> <span class="n">event</span>
</span><span class='line'><span class="n">process_remove_event</span><span class="p">,</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">hidraw0</span>
</span><span class='line'><span class="n">read_inotify</span> <span class="n">fd</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="mo">00000200</span> <span class="s">&quot;hidraw1&quot;</span>
</span><span class='line'><span class="n">Removing</span> <span class="n">device</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">hidraw1</span><span class="err">&#39;</span> <span class="n">due</span> <span class="n">to</span> <span class="n">inotify</span> <span class="n">event</span>
</span><span class='line'><span class="n">process_remove_event</span><span class="p">,</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">hidraw1</span>
</span><span class='line'><span class="p">[</span> <span class="mf">5002.247269</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">new</span> <span class="n">full</span><span class="o">-</span><span class="n">speed</span> <span class="n">USB</span> <span class="n">device</span> <span class="n">number</span> <span class="mi">4</span> <span class="n">using</span> <span class="n">berlin</span><span class="o">-</span><span class="n">ehci</span>
</span><span class='line'><span class="p">[</span> <span class="mf">5002.406589</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">New</span> <span class="n">USB</span> <span class="n">device</span> <span class="n">found</span><span class="p">,</span> <span class="n">idVendor</span><span class="o">=</span><span class="mo">046</span><span class="n">d</span><span class="p">,</span> <span class="n">idProduct</span><span class="o">=</span><span class="n">c52b</span>
</span><span class='line'><span class="p">[</span> <span class="mf">5002.413862</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">New</span> <span class="n">USB</span> <span class="n">device</span> <span class="n">strings</span><span class="o">:</span> <span class="n">Mfr</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">Product</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">SerialNumber</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="p">[</span> <span class="mf">5002.421457</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">Product</span><span class="o">:</span> <span class="n">USB</span> <span class="n">Receiver</span>
</span><span class='line'><span class="p">[</span> <span class="mf">5002.425927</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">Manufacturer</span><span class="o">:</span> <span class="n">Logitech</span>
</span><span class='line'><span class="n">read_inotify</span> <span class="n">fd</span><span class="o">:</span><span class="p">[</span> <span class="mf">5002.443452</span><span class="p">]</span> <span class="n">logitech</span><span class="o">-</span><span class="n">djreceiver</span> <span class="mo">0003</span><span class="o">:</span><span class="mo">046</span><span class="n">D</span><span class="o">:</span><span class="n">C52B</span><span class="mf">.000</span><span class="n">B</span><span class="o">:</span> <span class="n">hiddev0</span><span class="p">,</span><span class="n">hidraw0</span><span class="o">:</span> <span class="n">USB</span> <span class="n">HID</span> <span class="n">v1</span><span class="mf">.11</span> <span class="n">Device</span> <span class="p">[</span><span class="n">Logitech</span> <span class="n">USB</span> <span class="n">Receiver</span><span class="p">]</span> <span class="n">on</span> <span class="n">usb</span><span class="o">-</span><span class="n">f7ed0000</span><span class="p">.</span><span class="n">usb</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">input2</span>
</span><span class='line'> <span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="mo">00000100</span> <span class="s">&quot;hidraw0&quot;</span>
</span><span class='line'><span class="n">process_add_event</span><span class="p">,</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">hidraw0</span>
</span><span class='line'><span class="p">[</span> <span class="mf">5002.464392</span><span class="p">]</span> <span class="n">input</span><span class="o">:</span> <span class="n">Logitech</span> <span class="n">Unifying</span> <span class="n">Device</span><span class="p">.</span> <span class="n">Wireless</span> <span class="n">PID</span><span class="o">:</span><span class="mi">2012</span> <span class="n">as</span> <span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">soc</span><span class="mf">.0</span><span class="o">/</span><span class="n">f7ed0000</span><span class="p">.</span><span class="n">usb</span><span class="o">/</span><span class="n">usb1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mf">1.2</span><span class="o">/</span><span class="mo">0003</span><span class="o">:</span><span class="mo">046</span><span class="n">D</span><span class="o">:</span><span class="n">C52B</span><span class="mf">.000</span><span class="n">B</span><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">input4</span>
</span><span class='line'><span class="n">read_inotify</span> <span class="n">fd</span><span class="o">:</span><span class="p">[</span> <span class="mf">5002.479144</span><span class="p">]</span> <span class="n">logitech</span><span class="o">-</span><span class="n">djdevice</span> <span class="mo">0003</span><span class="o">:</span><span class="mo">046</span><span class="n">D</span><span class="o">:</span><span class="n">C52B</span><span class="mf">.000</span><span class="n">C</span><span class="o">:</span> <span class="n">input</span><span class="p">,</span><span class="n">hidraw1</span><span class="o">:</span> <span class="n">USB</span> <span class="n">HID</span> <span class="n">v1</span><span class="mf">.11</span> <span class="n">Keyboard</span> <span class="p">[</span><span class="n">Logitech</span> <span class="n">Unifying</span> <span class="n">Device</span><span class="p">.</span> <span class="n">Wireless</span> <span class="n">PID</span><span class="o">:</span><span class="mi">2012</span><span class="p">]</span> <span class="n">on</span> <span class="n">usb</span><span class="o">-</span><span class="n">f7ed0000</span><span class="p">.</span><span class="n">usb</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span>
</span><span class='line'> <span class="mi">4</span>
</span><span class='line'><span class="mi">1</span><span class="o">:</span> <span class="mo">00000100</span> <span class="s">&quot;hidraw1&quot;</span>
</span><span class='line'><span class="n">process_add_event</span><span class="p">,</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">hidraw1</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 pthread timer_create: periodically generate an event, as a heartbeat:</p>

<figure class='code'><figcaption><span> (pthread_timer-example.c)</span> <a href='http://yongbingchen.github.com/downloads/code/pthread_timer-example.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Copyright (C) 2013 Yongbing Chen &lt;yongbing.chen.wh@gmail.com&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span>
</span><span class='line'><span class="cm"> * you may not use this file except in compliance with the License.</span>
</span><span class='line'><span class="cm"> * You may obtain a copy of the License at</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="cm"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="cm"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="cm"> * See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="cm"> * limitations under the License.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;time.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">wrapper_class</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">is_alarm_fired</span><span class="p">;</span>
</span><span class='line'>  <span class="n">timer_t</span> <span class="n">timerid</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="n">wrapper_class</span><span class="p">,</span> <span class="o">*</span><span class="n">wrapper_class_t</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">something_is_on_fire</span><span class="p">(</span><span class="n">wrapper_class_t</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s, is_alarm_fired %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">is_alarm_fired</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">defuse_the_fire_alarm</span><span class="p">(</span><span class="n">wrapper_class_t</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s, is_alarm_fired %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">is_alarm_fired</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">trigger_alarm</span><span class="p">(</span><span class="k">union</span> <span class="n">sigval</span> <span class="n">sigev_val</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">wrapper_class_t</span> <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">wrapper_class_t</span><span class="p">)</span><span class="n">sigev_val</span><span class="p">.</span><span class="n">sival_ptr</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//TODO: may need mutex to protect object p.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">is_alarm_fired</span><span class="p">){</span>
</span><span class='line'>      <span class="n">something_is_on_fire</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">start_timer_for_alarm</span><span class="p">(</span><span class="n">wrapper_class_t</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sigevent</span> <span class="n">sev</span><span class="p">;</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sev</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">sigevent</span><span class="p">));</span>
</span><span class='line'>  <span class="n">sev</span><span class="p">.</span><span class="n">sigev_notify</span> <span class="o">=</span> <span class="n">SIGEV_THREAD</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sev</span><span class="p">.</span><span class="n">sigev_notify_function</span> <span class="o">=</span> <span class="n">trigger_alarm</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sev</span><span class="p">.</span><span class="n">sigev_value</span><span class="p">.</span><span class="n">sival_ptr</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">timer_create</span><span class="p">(</span><span class="n">CLOCK_REALTIME</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sev</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;timer ID is 0x%x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">struct</span> <span class="n">itimerspec</span> <span class="n">its</span><span class="p">;</span>
</span><span class='line'>  <span class="n">its</span><span class="p">.</span><span class="n">it_value</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="n">its</span><span class="p">.</span><span class="n">it_value</span><span class="p">.</span><span class="n">tv_nsec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">its</span><span class="p">.</span><span class="n">it_interval</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="n">its</span><span class="p">.</span><span class="n">it_interval</span><span class="p">.</span><span class="n">tv_nsec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">timer_settime</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">its</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;timer_settime failed, err %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>      <span class="n">timer_delete</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span><span class="p">);</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">event_handler</span><span class="p">(</span><span class="n">wrapper_class_t</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">is_alarm_fired</span><span class="p">){</span>
</span><span class='line'>      <span class="n">something_is_on_fire</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>      <span class="n">start_timer_for_alarm</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="n">timer_delete</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span><span class="p">);</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">defuse_the_fire_alarm</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Do not forget to delete this timer in wrapper class&#39;s destroy method!</span>
</span><span class='line'><span class="c1">//for abnormal exit path.</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">wrapper_class_deconstructor</span><span class="p">(</span><span class="n">wrapper_class_t</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="n">timer_delete</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span><span class="p">);</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">timerid</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int32_t</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int32_t</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">wrapper_class_t</span> <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">wrapper_class_t</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">wrapper_class</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">is_alarm_fired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">event_handler</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sleep</span><span class="p">(</span><span class="mi">55</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;</span><span class="n">is_alarm_fired</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">event_handler</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="n">wrapper_class_deconstructor</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __RUNNING_LOG</span>
</span><span class='line'><span class="n">shell</span><span class="err">@</span><span class="n">android</span><span class="o">:/</span><span class="n">data</span><span class="o">/</span><span class="n">app</span> <span class="err">#</span> <span class="n">logwrapper</span> <span class="p">.</span><span class="o">/</span><span class="n">test_pthread_timer</span>
</span><span class='line'><span class="mo">07</span><span class="o">-</span><span class="mo">01</span> <span class="mo">03</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">37.248</span> <span class="n">I</span><span class="o">/</span><span class="n">test_pthread_timer</span><span class="p">(</span> <span class="mi">2945</span><span class="p">)</span><span class="o">:</span> <span class="n">something_is_on_fire</span><span class="p">,</span> <span class="n">is_alarm_fired</span> <span class="mi">1</span>
</span><span class='line'><span class="mo">07</span><span class="o">-</span><span class="mo">01</span> <span class="mo">03</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">37.248</span> <span class="n">I</span><span class="o">/</span><span class="n">test_pthread_timer</span><span class="p">(</span> <span class="mi">2945</span><span class="p">)</span><span class="o">:</span> <span class="n">timer</span> <span class="n">ID</span> <span class="n">is</span> <span class="mh">0x80000000</span>
</span><span class='line'><span class="mo">07</span><span class="o">-</span><span class="mo">01</span> <span class="mo">03</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">47.248</span> <span class="n">I</span><span class="o">/</span><span class="n">test_pthread_timer</span><span class="p">(</span> <span class="mi">2945</span><span class="p">)</span><span class="o">:</span> <span class="n">something_is_on_fire</span><span class="p">,</span> <span class="n">is_alarm_fired</span> <span class="mi">1</span>
</span><span class='line'><span class="mo">07</span><span class="o">-</span><span class="mo">01</span> <span class="mo">03</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.248</span> <span class="n">I</span><span class="o">/</span><span class="n">test_pthread_timer</span><span class="p">(</span> <span class="mi">2945</span><span class="p">)</span><span class="o">:</span> <span class="n">something_is_on_fire</span><span class="p">,</span> <span class="n">is_alarm_fired</span> <span class="mi">1</span>
</span><span class='line'><span class="mo">07</span><span class="o">-</span><span class="mo">01</span> <span class="mo">03</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">07.248</span> <span class="n">I</span><span class="o">/</span><span class="n">test_pthread_timer</span><span class="p">(</span> <span class="mi">2945</span><span class="p">)</span><span class="o">:</span> <span class="n">something_is_on_fire</span><span class="p">,</span> <span class="n">is_alarm_fired</span> <span class="mi">1</span>
</span><span class='line'><span class="mo">07</span><span class="o">-</span><span class="mo">01</span> <span class="mo">03</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">17.248</span> <span class="n">I</span><span class="o">/</span><span class="n">test_pthread_timer</span><span class="p">(</span> <span class="mi">2945</span><span class="p">)</span><span class="o">:</span> <span class="n">something_is_on_fire</span><span class="p">,</span> <span class="n">is_alarm_fired</span> <span class="mi">1</span>
</span><span class='line'><span class="mo">07</span><span class="o">-</span><span class="mo">01</span> <span class="mo">03</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">27.248</span> <span class="n">I</span><span class="o">/</span><span class="n">test_pthread_timer</span><span class="p">(</span> <span class="mi">2945</span><span class="p">)</span><span class="o">:</span> <span class="n">something_is_on_fire</span><span class="p">,</span> <span class="n">is_alarm_fired</span> <span class="mi">1</span>
</span><span class='line'><span class="mo">07</span><span class="o">-</span><span class="mo">01</span> <span class="mo">03</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mf">32.248</span> <span class="n">I</span><span class="o">/</span><span class="n">test_pthread_timer</span><span class="p">(</span> <span class="mi">2945</span><span class="p">)</span><span class="o">:</span> <span class="n">defuse_the_fire_alarm</span><span class="p">,</span> <span class="n">is_alarm_fired</span> <span class="mi">0</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>3 netlink NETLINK_KOBJECT_UEVENT: same purpose as #1:</p>

<figure class='code'><figcaption><span> (ueventd-example.c)</span> <a href='http://yongbingchen.github.com/downloads/code/ueventd-example.c'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Copyright (C) 2013 Yongbing Chen &lt;yongbing.chen.wh@gmail.com&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span>
</span><span class='line'><span class="cm"> * you may not use this file except in compliance with the License.</span>
</span><span class='line'><span class="cm"> * You may obtain a copy of the License at</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> *      http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="cm"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="cm"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="cm"> * See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="cm"> * limitations under the License.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/netlink.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int32_t</span> <span class="nf">init_event_sock</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_nl</span> <span class="n">netlink_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">int32_t</span> <span class="n">buffersize</span> <span class="o">=</span> <span class="mi">128</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int32_t</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">netlink_addr</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_nl</span><span class="p">));</span>
</span><span class='line'>    <span class="n">netlink_addr</span><span class="p">.</span><span class="n">nl_family</span> <span class="o">=</span> <span class="n">AF_NETLINK</span><span class="p">;</span>
</span><span class='line'>    <span class="n">netlink_addr</span><span class="p">.</span><span class="n">nl_pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">netlink_addr</span><span class="p">.</span><span class="n">nl_groups</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int32_t</span> <span class="n">event_socket</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">PF_NETLINK</span><span class="p">,</span> <span class="n">SOCK_DGRAM</span><span class="p">,</span> <span class="n">NETLINK_KOBJECT_UEVENT</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">event_socket</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int32_t</span> <span class="n">err</span> <span class="o">=</span> <span class="n">errno</span><span class="p">;</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;error getting socket: %s&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="n">err</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* set receive buffersize */</span>
</span><span class='line'>    <span class="n">setsockopt</span><span class="p">(</span><span class="n">event_socket</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_RCVBUFFORCE</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buffersize</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffersize</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ret</span> <span class="o">=</span> <span class="n">bind</span><span class="p">(</span><span class="n">event_socket</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">netlink_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_nl</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int32_t</span> <span class="n">err</span> <span class="o">=</span> <span class="n">errno</span><span class="p">;</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bind failed: %s&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">event_socket</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="n">err</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">event_socket</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int32_t</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int32_t</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">event_sock_buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int32_t</span> <span class="n">event_socket</span> <span class="o">=</span> <span class="n">init_event_sock</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">event_socket</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="kt">int32_t</span> <span class="n">len</span> <span class="o">=</span> <span class="n">TEMP_FAILURE_RETRY</span><span class="p">(</span><span class="n">recv</span><span class="p">(</span><span class="n">event_socket</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">event_sock_buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">event_sock_buf</span><span class="p">),</span> <span class="mi">0</span><span class="p">));</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;recv failed: %s&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="kt">int32_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;next event in buf: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">event_sock_buf</span><span class="o">+</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">+=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">event_sock_buf</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">event_socket</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __RUNNING_LOG</span>
</span><span class='line'><span class="n">shell</span><span class="err">@</span><span class="n">android</span><span class="o">:/</span><span class="n">data</span><span class="o">/</span><span class="n">app</span> <span class="err">#</span> <span class="p">.</span><span class="o">/</span><span class="n">test_uevent</span>
</span><span class='line'><span class="p">[</span> <span class="mf">4550.363457</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">USB</span> <span class="n">disconnect</span><span class="p">,</span> <span class="n">device</span> <span class="n">number</span> <span class="mi">2</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">remove</span><span class="err">@</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">soc</span><span class="mf">.0</span><span class="o">/</span><span class="n">f7ed0000</span><span class="p">.</span><span class="n">usb</span><span class="o">/</span><span class="n">usb1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mf">1.2</span><span class="o">/</span><span class="mo">0003</span><span class="o">:</span><span class="mo">046</span><span class="n">D</span><span class="o">:</span><span class="n">C52B</span><span class="mf">.0003</span><span class="o">/</span><span class="n">hidraw</span><span class="o">/</span><span class="n">hidraw0</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">ACTION</span><span class="o">=</span><span class="n">remove</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">DEVPATH</span><span class="o">=/</span><span class="n">devices</span><span class="o">/</span><span class="n">soc</span><span class="mf">.0</span><span class="o">/</span><span class="n">f7ed0000</span><span class="p">.</span><span class="n">usb</span><span class="o">/</span><span class="n">usb1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mf">1.2</span><span class="o">/</span><span class="mo">0003</span><span class="o">:</span><span class="mo">046</span><span class="n">D</span><span class="o">:</span><span class="n">C52B</span><span class="mf">.0003</span><span class="o">/</span><span class="n">hidraw</span><span class="o">/</span><span class="n">hidraw0</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">SUBSYSTEM</span><span class="o">=</span><span class="n">hidraw</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">MAJOR</span><span class="o">=</span><span class="mi">249</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">MINOR</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">DEVNAME</span><span class="o">=</span><span class="n">hidraw0</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">SEQNUM</span><span class="o">=</span><span class="mi">878</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span> <span class="mf">4554.467274</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">new</span> <span class="n">full</span><span class="o">-</span><span class="n">speed</span> <span class="n">USB</span> <span class="n">device</span> <span class="n">number</span> <span class="mi">3</span> <span class="n">using</span> <span class="n">berlin</span><span class="o">-</span><span class="n">ehci</span>
</span><span class='line'><span class="p">[</span> <span class="mf">4554.626594</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">New</span> <span class="n">USB</span> <span class="n">device</span> <span class="n">found</span><span class="p">,</span> <span class="n">idVendor</span><span class="o">=</span><span class="mo">046</span><span class="n">d</span><span class="p">,</span> <span class="n">idProduct</span><span class="o">=</span><span class="n">c52b</span>
</span><span class='line'><span class="p">[</span> <span class="mf">4554.633604</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">New</span> <span class="n">USB</span> <span class="n">device</span> <span class="n">strings</span><span class="o">:</span> <span class="n">Mfr</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">Product</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">SerialNumber</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="p">[</span> <span class="mf">4554.641231</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">Product</span><span class="o">:</span> <span class="n">USB</span> <span class="n">Receiver</span>
</span><span class='line'><span class="p">[</span> <span class="mf">4554.645650</span><span class="p">]</span> <span class="n">usb</span> <span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">Manufacturer</span><span class="o">:</span> <span class="n">Logitech</span>
</span><span class='line'><span class="p">[</span> <span class="mf">4554.664080</span><span class="p">]</span> <span class="n">logitech</span><span class="o">-</span><span class="n">djreceiver</span> <span class="mo">0003</span><span class="o">:</span><span class="mo">046</span><span class="n">D</span><span class="o">:</span><span class="n">C52B</span><span class="mf">.0007</span><span class="o">:</span> <span class="n">hiddev0</span><span class="p">,</span><span class="n">hidraw0</span><span class="o">:</span> <span class="n">USB</span> <span class="n">HID</span> <span class="n">v1</span><span class="mf">.11</span> <span class="n">Device</span> <span class="p">[</span><span class="n">Logitech</span> <span class="n">USB</span> <span class="n">Receiver</span><span class="p">]</span> <span class="n">on</span> <span class="n">usb</span><span class="o">-</span><span class="n">f7ed0000</span><span class="p">.</span><span class="n">usb</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">input2</span>
</span><span class='line'><span class="p">[</span> <span class="mf">4554.686310</span><span class="p">]</span> <span class="n">input</span><span class="o">:</span> <span class="n">Logitech</span> <span class="n">Unifying</span> <span class="n">Device</span><span class="p">.</span> <span class="n">Wireless</span> <span class="n">PID</span><span class="o">:</span><span class="mi">2012</span> <span class="n">as</span> <span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">soc</span><span class="mf">.0</span><span class="o">/</span><span class="n">f7ed0000</span><span class="p">.</span><span class="n">usb</span><span class="o">/</span><span class="n">usb1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mf">1.2</span><span class="o">/</span><span class="mo">0003</span><span class="o">:</span><span class="mo">046</span><span class="n">D</span><span class="o">:</span><span class="n">C52B</span><span class="mf">.0007</span><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">input3</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">add</span><span class="err">@</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">soc</span><span class="mf">.0</span><span class="o">/</span><span class="n">f7ed0000</span><span class="p">.</span><span class="n">usb</span><span class="o">/</span><span class="n">usb1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mf">1.2</span><span class="o">/</span><span class="mo">0003</span><span class="o">:</span><span class="mo">046</span><span class="n">D</span><span class="o">:</span><span class="n">C52B</span><span class="mf">.0007</span><span class="o">/</span><span class="n">hidraw</span><span class="o">/</span><span class="n">hidraw0</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">ACTION</span><span class="o">=</span><span class="n">add</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">DEVPATH</span><span class="o">=/</span><span class="n">devices</span><span class="o">/</span><span class="n">soc</span><span class="mf">.0</span><span class="o">/</span><span class="n">f7ed0000</span><span class="p">.</span><span class="n">usb</span><span class="o">/</span><span class="n">usb1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">1</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="mf">1.2</span><span class="o">/</span><span class="mo">0003</span><span class="o">:</span><span class="mo">046</span><span class="n">D</span><span class="o">:</span><span class="n">C52B</span><span class="mf">.0007</span><span class="o">/</span><span class="n">hidraw</span><span class="o">/</span><span class="n">hidraw0</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">SUBSYSTEM</span><span class="o">=</span><span class="n">hidraw</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">MAJOR</span><span class="o">=</span><span class="mi">249</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">MINOR</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">DEVNAME</span><span class="o">=</span><span class="n">hidraw0</span>
</span><span class='line'><span class="n">next</span> <span class="n">event</span> <span class="n">in</span> <span class="n">buf</span><span class="o">:</span> <span class="n">SEQNUM</span><span class="o">=</span><span class="mi">896</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bluedroid bug fixing]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/25/bluedroid-bug-fix/"/>
    <updated>2013-05-25T07:13:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/25/bluedroid-bug-fix</id>
    <content type="html"><![CDATA[<p>I fixed thress tricky bugs in one week, that&#8217;s pretty efficient, even out of my own expectation ^-^</p>

<h2>bug I: TiVo remote connected but not working.</h2>

<p>QA reported a bug that TiVo remote control connected, but no key input captured by our host.</p>

<p>Compared with the normal case (some other HID device), I found below message missed for TiVo case after BT connect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>05-16 22:13:34.386 D/bt-btif ( 2146): UHID_START from uhid-dev
</span><span class='line'>05-16 22:13:34.386 D/bt-btif ( 2146): UHID_OPEN from uhid-dev</span></code></pre></td></tr></table></div></figure>


<p>That means the input device for this newly added HID device(TiVo remote) has never been opened by Android EventHub.cpp in failed case.</p>

<p>Then I checked the getevent result when TiVo remote connected, found out that there&#8217;s no input device created for it at all.</p>

<p>Tracing from where Bluedroid created a uhid device for a newly added HID device in bta_hh_co_send_hid_info() down to hid kernel code, turned out that the Vendor_id/Product_id for TiVo remote already registered in hid kernel part (point to an existing kernel driver linux/drivers/hid/hid-tivo.c, which is based on BlueZ hidp), so this is an issue of Bluedroid, affecting a group of device which has registered id in kernel as HID_BLUETOOTH_DEVICE.</p>

<p>This kind of devices suppose to be servered by their own driver, so the generic probe method hid_device_probe() will not be triggered when trying to create a uhid device from Bluedroid, thus the input device file will not be created by input_register_device() within this probe.</p>

<h2>bug II: Lenovo BT mouse can not pair with our host.</h2>

<p>The log shows below error when trying to pair Lenovo BT mouse:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>05-16 21:07:41.451 W/bt-sdp  ( 2146): result :36005A0900000A000100010200013503191200090004350D350619010009000135031900010902053503191002090009350835061912000901000902000901000902010917EF0902020960020902030902450902042801090205090002
</span><span class='line'>05-16 21:07:41.451 W/bt-sdp  ( 2146): SDP - Bad type: 0x02 or len: 4 in attr_rsp</span></code></pre></td></tr></table></div></figure>


<p>Compared with air log, I found that one byte of the SDP message is different:
In air log, I found :0900000A00010001<font color = "red">02</font>0001,
while in dump message in the error message, it&#8217;s 0900000A00010001<font color = "green">09</font>0001</p>

<p>Narrow down this change from driver level to Bluedroid SDP, finally found out it&#8217;s a bug in btsnoop_capture(), a simple load/restore bug.</p>

<h2>bug III: Can not unpair a remote HID device.</h2>

<p>QA found one HID device can not be unpaired: if the device is connected when doing unpair, the device remain connected after unpair, and can not be paired again after unpair.</p>

<p>From the log, I found below error message when trying to re-piar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>05-20 21:09:19.567  2125  2158 W bt-btif : btif_hh_connect: Device  already added, attr_mask = 0x8005
</span><span class='line'>05-20 21:09:19.567  2125  2158 E bt-btif : btif_hh_connect: Error, device  can only be reconnected from device side</span></code></pre></td></tr></table></div></figure>


<p>Compared with another HID device which can successfully do unpair/pair, I found that the success case can correctly response to host&#8217;s BTA_HH_CTRL_VIRTUAL_CABLE_UNPLUG request as defined in HID spec 1.1, figure A.4.</p>

<p>In the failed case, the HID device will not initiate disconnect against our host after receiving the unplug request, and Bluedroid in our host failed to deal with this situation, as required by HID spec, to delete pair information after issue this requirement. Due to this remaining piece of pair information, next pair attempt will fail.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dump_stack in Android native C code]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/09/dump-stack-in-android-native-c-code/"/>
    <updated>2013-05-09T21:34:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/09/dump-stack-in-android-native-c-code</id>
    <content type="html"><![CDATA[<p>1 Wrapper Android C++ method into a C function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="err">$</span> <span class="n">cat</span> <span class="n">bta</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">dump_stack</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'><span class="cp">#include &lt;utils/CallStack.h&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">android</span><span class="p">;</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="kt">void</span> <span class="n">dump_stack_android</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">CallStack</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>        <span class="n">stack</span><span class="p">.</span><span class="n">update</span><span class="p">();</span>
</span><span class='line'>        <span class="n">stack</span><span class="p">.</span><span class="n">dump</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 Call this C function from target place:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">bta</span><span class="o">/</span><span class="n">dm</span><span class="o">/</span><span class="n">bta_dm_act</span><span class="p">.</span><span class="n">c</span> <span class="n">b</span><span class="o">/</span><span class="n">bta</span><span class="o">/</span><span class="n">dm</span><span class="o">/</span><span class="n">bta_dm_act</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="o">+</span><span class="k">extern</span> <span class="kt">void</span> <span class="n">dump_stack_android</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'> <span class="k">static</span> <span class="kt">void</span> <span class="n">bta_dm_adjust_roles</span><span class="p">(</span><span class="n">BOOLEAN</span> <span class="n">delay_role_switch</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'><span class="o">+</span>    <span class="n">dump_stack_android</span><span class="p">();</span>
</span><span class='line'>     <span class="k">if</span><span class="p">(</span><span class="n">bta_dm_cb</span><span class="p">.</span><span class="n">device_list</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>     <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>3 Add library libutils as dependency in LOCAL_SHARED_LIBRARIES,</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">diff</span> <span class="o">--</span><span class="n">git</span> <span class="n">a</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">Android</span><span class="p">.</span><span class="n">mk</span> <span class="n">b</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">Android</span><span class="p">.</span><span class="n">mk</span>
</span><span class='line'> <span class="n">LOCAL_SRC_FILES</span><span class="o">+=</span> \
</span><span class='line'> <span class="o">+</span>       <span class="p">..</span><span class="o">/</span><span class="n">bta</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">dump_stack</span><span class="p">.</span><span class="n">cpp</span> \
</span><span class='line'>         <span class="p">..</span><span class="o">/</span><span class="n">udrv</span><span class="o">/</span><span class="n">ulinux</span><span class="o">/</span><span class="n">uipc</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>
</span><span class='line'> <span class="n">LOCAL_SHARED_LIBRARIES</span> <span class="o">:=</span> \
</span><span class='line'>     <span class="n">libcutils</span> \
</span><span class='line'><span class="o">+</span>    <span class="n">libutils</span> \
</span></code></pre></td></tr></table></div></figure>


<p>I met a ld error as:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">error:</span> <span class="n">undefined</span> <span class="n">reference</span> <span class="n">to</span> <span class="err">&#39;</span><span class="n">android</span><span class="o">::</span><span class="n">CallStack</span><span class="o">::</span><span class="n">CallStack</span><span class="p">()</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It turned out that I added the libutils dependency into a static library libbt-brcm_bta, which can not solve this dynamic symbol at link time</p>

<blockquote><p></p><footer><strong>refer to this wiki</strong> <cite><a href='https://en.wikipedia.org/wiki/Static_library'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote>


<p>Move the dependency to dynamic library bluetooth.default.so solved the problem.</p>

<p>The final result on running board is:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">root</span><span class="err">@</span><span class="nl">android:</span><span class="o">/</span> <span class="err">#</span> <span class="n">logcat</span> <span class="o">-</span><span class="n">v</span> <span class="n">time</span> <span class="o">|</span><span class="n">grep</span> <span class="n">CallStack</span><span class="o">&amp;</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">00</span>  <span class="n">pc</span> <span class="mo">0005</span><span class="n">c444</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">dump_stack_android</span><span class="o">+</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">01</span>  <span class="n">pc</span> <span class="mo">0004</span><span class="n">ddb2</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">02</span>  <span class="n">pc</span> <span class="mo">0004</span><span class="n">c310</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_sys_conn_close</span><span class="o">+</span><span class="mi">27</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">03</span>  <span class="n">pc</span> <span class="mo">000577</span><span class="n">d4</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_av_str_closed</span><span class="o">+</span><span class="mi">115</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">04</span>  <span class="n">pc</span> <span class="mo">0004705</span><span class="n">e</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_av_ssm_execute</span><span class="o">+</span><span class="mi">269</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">05</span>  <span class="n">pc</span> <span class="mf">00046f</span><span class="mi">1</span><span class="n">c</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_av_hdl_event</span><span class="o">+</span><span class="mi">159</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">06</span>  <span class="n">pc</span> <span class="mo">0004</span><span class="n">bf02</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">bta_sys_event</span><span class="o">+</span><span class="mi">49</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mo">07</span>  <span class="n">pc</span> <span class="mo">00074</span><span class="n">b70</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">btu_task</span><span class="o">+</span><span class="mi">559</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mi">08</span>  <span class="n">pc</span> <span class="mo">000427</span><span class="mi">84</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">gki_task_entry</span><span class="o">+</span><span class="mi">91</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mi">09</span>  <span class="n">pc</span> <span class="mf">0000e3</span><span class="n">d8</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libc</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">__thread_entry</span><span class="o">+</span><span class="mi">72</span><span class="p">)</span>
</span><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mi">09</span> <span class="mi">21</span><span class="o">:</span><span class="mo">01</span><span class="o">:</span><span class="mf">57.666</span> <span class="n">D</span><span class="o">/</span><span class="n">CallStack</span><span class="p">(</span> <span class="mi">2133</span><span class="p">)</span><span class="o">:</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span><span class="err">#</span><span class="mi">10</span>  <span class="n">pc</span> <span class="mo">0000</span><span class="n">dac4</span>  <span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libc</span><span class="p">.</span><span class="n">so</span> <span class="p">(</span><span class="n">pthread_create</span><span class="o">+</span><span class="mi">160</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This result can be verified as the same as addr2line:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="err">$</span> <span class="n">arm</span><span class="o">-</span><span class="n">eabi</span><span class="o">-</span><span class="n">addr2line</span> <span class="o">-</span><span class="n">e</span> <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="n">out</span><span class="o">/</span><span class="n">target</span><span class="o">/</span><span class="n">product</span><span class="o">/</span><span class="n">bg2ct_dmp_emmc</span><span class="o">/</span><span class="n">symbols</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">hw</span><span class="o">/</span><span class="n">bluetooth</span><span class="p">.</span><span class="k">default</span><span class="p">.</span><span class="n">so</span> <span class="mo">0004</span><span class="n">c310</span>
</span><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">bta</span><span class="o">/</span><span class="p">.</span><span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">bta_sys_conn</span><span class="p">.</span><span class="nl">c:</span><span class="mi">236</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Update: Peek stack of a running process</h1>

<p>Android debuggerd can be used to dump a running process&#8217;s stack:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>
</span><span class='line'><span class="n">ALOGD</span><span class="p">(</span><span class="s">&quot;peeking stack of process %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'><span class="n">kill</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">SIGSTOP</span><span class="p">);</span>
</span><span class='line'><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_ATTACH</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">tombstone_path</span> <span class="o">=</span> <span class="n">engrave_tombstone</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span>
</span><span class='line'>      <span class="n">pid</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">0</span><span class="cm">/*no signal*/</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">true</span> <span class="cm">/*dump_sibling_threads*/</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">false</span> <span class="cm">/*not quiet*/</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">detach_failed</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">total_sleep_time_usec</span><span class="p">);</span>
</span><span class='line'><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_DETACH</span><span class="p">,</span> <span class="n">pid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">kill</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">SIGCONT</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The stack of main thread of the process will shown in logcat, and all others will be in the tombstone file.
The target process will resume to execution right after the dump stack finished.
This is useful when debugging some real time issues.</p>

<blockquote><p></p><footer><strong>source code and test log</strong> <cite><a href='http://yongbingchen.github.com/downloads/code/peek_stack.tar.gz'>yongbingchen.github.com/code/&hellip;</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dissect Bluedroid from A2DP: Part V: Key components]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-v-summary/"/>
    <updated>2013-05-07T20:57:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-v-summary</id>
    <content type="html"><![CDATA[<h3>1 Interface and implementation</h3>

<p><font color = "green">bt_interface_t</font>: Android defined, Bluedroid implemented as bluetoothInterface in external/bluetooth/bluedroid/btif/src/bluetooth.c: System control BT adapter.</p>

<p><font color = "green">btav_interface_t</font>: Android defined, Bluedroid implemented as bt_av_interface in external/bluetooth/bluedroid/btif/src/btif_av.c: System control A2DP service.</p>

<p><font color = "green">audio_hw_device and audio_stream_out</font>: Android defined, Bluedroid implemented in external/bluetooth/bluedroid/audio_a2dp_hw/audio_a2dp_hw.c: AudioFlinger use A2DP client as audio output device.</p>

<p><font color = "green">bt_vendor_interface_t</font>: Bluedroid defined, BRCM implemented as BLUETOOTH_VENDOR_LIB_INTERFACE in device/common/libbt/src/bt_vendor_brcm.c: Bluedroid talk to BT char device driver, internal usage only.</p>

<p><font color = "green">tHCI_IF</font>: Bluedroid defined, Bluedroid implemented as hci_h4_func_table in external/bluetooth/bluedroid/hci/src/hci_h4.c: Bluedroid HCI interface (data/cmd/evt in/out), internal usage only.</p>

<p><font color = "green">bt_hc_interface_t</font>: Bluedroid defined, Bluedroid implemented as bluetoothHCLibInterface in external/bluetooth/bluedroid/hci/src/bt_hci_bdroid.c: Wrapper of tHCI_IF, has bt_hc_worker_thread to serialize downcoming HCI commands and read upcoming data/evt from HCI device.</p>

<p><font color = "green">L2CAP </font> layer API, in external/bluetooth/bluedroid/stack/include/l2c_api.h, internal usage only.</p>

<p><font color = "green">LMP </font> API, in external/bluetooth/bluedroid/stack/include/btm_api.h, internal usage only.</p>

<h3>2 Tasks/Roles/Layers</h3>

<p><font color = "green">btif_task</font>, managing all messages being passed Android Bluetooth HAL and BTA.</p>

<p><font color = "green">btu_task</font>, the main task of the Bluetooth Upper Layers unit, routing in/out BT cmd/event/data, processing timeout events.</p>

<p><font color = "green">bt_hc_worker_thread</font>, HCI worker thread, all HCI traffic come through this thread.</p>

<p><font color = "green">userial_read_thread</font>, monitoring incoming packets from BT char device driver, transfering these to bt_hc_worker_thread.</p>

<p><font color = "green">btif_media_task</font>, task for A2DP SBC encoder.</p>

<p><font color = "green">uipc_read_task</font>, A2DP server thread, receive audio input data from A2DP client, feed into btif_media_task.</p>

<p><font color = "green">UIPC/A2DP_CTRL_PATH/A2DP_DATA_PATH</font>, socket based IPC, for A2DP client connect/control to A2DP server.</p>

<p><font color = "green">AVDT_CHAN_SIG/AVDT_CHAN_MEDIA/AVDT_CHAN_REPORT</font>, A2DP channels, communicate with remote device.</p>

<p>Serial Finished.</p>

<p>Reference:</p>

<blockquote><p></p><footer><strong>source code reading note</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-source-code-reading-note.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dissect Bluedroid from A2DP: Part IV: connect and communication]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-iv-a2dp-traffic/"/>
    <updated>2013-05-07T04:50:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-iv-a2dp-traffic</id>
    <content type="html"><![CDATA[<h3>Item A. Connect a remote A2DP device:</h3>

<p><img class="center" src="http://yongbingchen.github.com/images/bluedroid/a2dp_connect.jpg" title="" >
1 Android system will try to reconnect paired A2DP device automatically after BT enable.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mo">04</span><span class="o">-</span><span class="mi">25</span> <span class="mo">01</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mf">31.080</span> <span class="n">D</span><span class="o">/</span><span class="n">BluetoothAdapterService</span><span class="p">(</span> <span class="mi">2093</span><span class="p">)</span><span class="o">:</span> <span class="n">Auto</span> <span class="n">Connecting</span> <span class="n">A2DP</span> <span class="n">Profile</span> <span class="n">with</span> <span class="n">device</span> <span class="mi">50</span><span class="o">:</span><span class="nl">C9:</span><span class="mi">71</span><span class="o">:</span><span class="mi">0</span><span class="nl">D:D2:</span><span class="n">D9</span>
</span><span class='line'>  <span class="n">packages</span><span class="o">/</span><span class="n">apps</span><span class="o">/</span><span class="n">Bluetooth</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">com_android_bluetooth_a2dp</span><span class="p">.</span><span class="n">cpp</span> 
</span><span class='line'>  <span class="k">static</span> <span class="n">jboolean</span> <span class="n">connectA2dpNative</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">object</span><span class="p">,</span> <span class="n">jbyteArray</span> <span class="n">address</span><span class="p">)</span>
</span><span class='line'>      <span class="k">const</span> <span class="n">bt_interface_t</span><span class="o">*</span> <span class="n">btInf</span><span class="o">=</span> <span class="n">getBluetoothInterface</span><span class="p">();</span>
</span><span class='line'>      <span class="k">const</span> <span class="n">btav_interface_t</span> <span class="o">*</span><span class="n">sBluetoothA2dpInterface</span> <span class="o">=</span> <span class="p">(</span><span class="n">btav_interface_t</span> <span class="o">*</span><span class="p">)</span><span class="n">btInf</span><span class="o">-&gt;</span><span class="n">get_profile_interface</span><span class="p">(</span><span class="n">BT_PROFILE_ADVANCED_AUDIO_ID</span><span class="p">);</span>
</span><span class='line'>      <span class="n">status</span> <span class="o">=</span> <span class="n">sBluetoothA2dpInterface</span><span class="o">-&gt;</span><span class="n">connect</span><span class="p">((</span><span class="n">bt_bdaddr_t</span> <span class="o">*</span><span class="p">)</span><span class="n">addr</span><span class="p">)</span>
</span><span class='line'>          <span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">btif</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">btif_av</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>          <span class="n">btif_queue_connect</span><span class="p">(</span><span class="n">UUID_SERVCLASS_AUDIO_SOURCE</span><span class="p">,</span> <span class="n">bd_addr</span><span class="p">,</span> <span class="n">connect_int</span><span class="p">);</span><span class="c1">//This will trigger an event in btu_task, now the caller thread returned.</span>
</span><span class='line'>              <span class="n">GKI_send_msg</span><span class="p">(</span><span class="n">BTIF_TASK</span><span class="p">,</span> <span class="n">BTU_BTIF_MBOX</span><span class="p">,</span> <span class="n">p_msg</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 This will later trigger a A2DP server event API_CONNECT_REQ_EVT in state CCB_IDLE_ST:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mo">02</span> <span class="mo">01</span><span class="o">:</span><span class="mi">54</span><span class="o">:</span><span class="mf">33.342</span> <span class="n">I</span><span class="o">/</span><span class="n">bt</span><span class="o">-</span><span class="n">avp</span>  <span class="p">(</span> <span class="mi">2093</span><span class="p">)</span><span class="o">:</span> <span class="n">CCB</span> <span class="n">ccb</span><span class="o">=</span><span class="mi">0</span> <span class="n">event</span><span class="o">=</span><span class="n">API_CONNECT_REQ_EVT</span> <span class="n">state</span><span class="o">=</span><span class="n">CCB_IDLE_ST</span>
</span></code></pre></td></tr></table></div></figure>


<p>3 A2DP server handle this event in bellow two actions:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">stack</span><span class="o">/</span><span class="n">avdt</span><span class="o">/</span><span class="n">avdt_ccb</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">129</span> <span class="k">const</span> <span class="n">UINT8</span> <span class="n">avdt_ccb_st_idle</span><span class="p">[][</span><span class="n">AVDT_CCB_NUM_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="mi">130</span> <span class="cm">/* Event                      Action 1                    Action 2                    Next state */</span>
</span><span class='line'><span class="mi">139</span> <span class="cm">/* API_CONNECT_REQ_EVT */</span>    <span class="p">{</span><span class="n">AVDT_CCB_SET_CONN</span><span class="p">,</span>          <span class="n">AVDT_CCB_CHAN_OPEN</span><span class="p">,</span>         <span class="n">AVDT_CCB_OPENING_ST</span><span class="p">},</span>
</span><span class='line'><span class="c1">//3.1 Set CCB variables associated with AVDT_ConnectReq().</span>
</span><span class='line'><span class="mi">996</span> <span class="kt">void</span> <span class="n">avdt_ccb_set_conn</span><span class="p">(</span><span class="n">tAVDT_CCB</span> <span class="o">*</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">tAVDT_CCB_EVT</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">BTM_SetSecurityLevel</span><span class="p">(</span><span class="n">TRUE</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">BTM_SEC_SERVICE_AVDTP</span><span class="p">,</span> <span class="n">p_data</span><span class="o">-&gt;</span><span class="n">connect</span><span class="p">.</span><span class="n">sec_mask</span><span class="p">,</span><span class="n">AVDT_PSM</span><span class="p">,</span> <span class="n">BTM_SEC_PROTO_AVDT</span><span class="p">,</span> <span class="n">AVDT_CHAN_SIG</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//3.2 initiate a signaling channel connection.</span>
</span><span class='line'><span class="mi">87</span> <span class="kt">void</span> <span class="n">avdt_ccb_chan_open</span><span class="p">(</span><span class="n">tAVDT_CCB</span> <span class="o">*</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">tAVDT_CCB_EVT</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">BTM_SetOutService</span><span class="p">(</span><span class="n">p_ccb</span><span class="o">-&gt;</span><span class="n">peer_addr</span><span class="p">,</span> <span class="n">BTM_SEC_SERVICE_AVDTP</span><span class="p">,</span> <span class="n">AVDT_CHAN_SIG</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">avdt_ad_open_req</span><span class="p">(</span><span class="n">AVDT_CHAN_SIG</span><span class="p">,</span> <span class="n">p_ccb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">AVDT_INT</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>4 How L2CAP handle this channel connection:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">stack</span><span class="o">/</span><span class="n">l2cap</span><span class="o">/</span><span class="n">l2c_api</span><span class="p">.</span><span class="n">c</span>                     
</span><span class='line'><span class="mi">229</span> <span class="n">UINT16</span> <span class="n">L2CA_ErtmConnectReq</span> <span class="p">(</span><span class="n">UINT16</span> <span class="n">psm</span><span class="p">,</span> <span class="n">BD_ADDR</span> <span class="n">p_bd_addr</span><span class="p">,</span> <span class="n">tL2CAP_ERTM_INFO</span> <span class="o">*</span><span class="n">p_ertm_info</span><span class="p">)</span>                      
</span><span class='line'>  <span class="n">p_lcb</span> <span class="o">=</span> <span class="n">l2cu_allocate_lcb</span> <span class="p">(</span><span class="n">p_bd_addr</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">l2cu_create_conn</span><span class="p">(</span><span class="n">p_lcb</span><span class="p">);</span><span class="c1">//This function initiates an acl connection via HCI</span>
</span><span class='line'>      <span class="mi">2180</span> <span class="n">BOOLEAN</span> <span class="n">l2cu_create_conn_after_switch</span> <span class="p">(</span><span class="n">tL2C_LCB</span> <span class="o">*</span><span class="n">p_lcb</span><span class="p">)</span>
</span><span class='line'>          <span class="c1">//external/bluetooth/bluedroid/stack/hcic/hcicmds.c</span>
</span><span class='line'>          <span class="n">btsnd_hcic_create_conn</span> <span class="p">(</span><span class="n">p_lcb</span><span class="o">-&gt;</span><span class="n">remote_bd_addr</span><span class="p">,</span><span class="n">HCI_PKT_TYPES_MASK_DM1</span> <span class="o">+</span> <span class="n">HCI_PKT_TYPES_MASK_DH1</span><span class="p">,</span><span class="n">page_scan_rep_mode</span><span class="p">,</span><span class="n">page_scan_mode</span><span class="p">,</span><span class="n">clock_offset</span><span class="p">,</span><span class="n">allow_switch</span><span class="p">));</span>
</span><span class='line'>              <span class="n">HCI_CMD_TO_LOWER</span><span class="p">(</span><span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'>                  <span class="c1">//external/bluetooth/bluedroid/main/bte_main.c</span>
</span><span class='line'>                  <span class="n">bt_hc_if</span><span class="o">-&gt;</span><span class="n">transmit_buf</span><span class="p">((</span><span class="n">TRANSAC</span><span class="p">)</span><span class="n">p_msg</span><span class="p">,</span> <span class="err">\</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">p_msg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="err">\</span><span class="n">p_msg</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>                      <span class="n">utils_enqueue</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tx_q</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">transac</span><span class="p">);</span>
</span><span class='line'>                       <span class="n">bthc_signal_event</span><span class="p">(</span><span class="n">HC_EVENT_TX</span><span class="p">);</span>
</span><span class='line'>          <span class="n">btu_start_timer</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">p_lcb</span><span class="o">-&gt;</span><span class="n">timer_entry</span><span class="p">,</span> <span class="n">BTU_TTYPE_L2CAP_LINK</span><span class="p">,</span><span class="n">L2CAP_LINK_CONNECT_TOUT</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>5 This command will trigger connection establish process between local and remote device, accomplished by a event-driven state machine in BT stack.</p>

<h3>Item B. a2dp_write data path:</h3>

<p><img class="center" src="http://yongbingchen.github.com/images/bluedroid/a2dp_write.jpg" title="" >
1 A2DP client writes to A2DP data socket will trigger API_WRITE_REQ_EVT in SCB_STREAM_ST state:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mo">05</span><span class="o">-</span><span class="mo">02</span> <span class="mo">01</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mf">03.134</span> <span class="n">I</span><span class="o">/</span><span class="n">bt</span><span class="o">-</span><span class="n">avp</span>  <span class="p">(</span> <span class="mi">2139</span><span class="p">)</span><span class="o">:</span> <span class="n">SCB</span> <span class="n">hdl</span><span class="o">=</span><span class="mi">1</span> <span class="n">event</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="n">API_WRITE_REQ_EVT</span> <span class="n">state</span><span class="o">=</span><span class="n">SCB_STREAM_ST</span>
</span><span class='line'><span class="mi">394</span> <span class="cm">/* state table for streaming state */</span>
</span><span class='line'><span class="mi">395</span> <span class="k">const</span> <span class="n">UINT8</span> <span class="n">avdt_scb_st_stream</span><span class="p">[][</span><span class="n">AVDT_SCB_NUM_COLS</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="mi">396</span> <span class="cm">/* Event                     Action 1                       Action 2                    Next state */</span>
</span><span class='line'><span class="mi">398</span> <span class="cm">/* API_WRITE_REQ_EVT */</span>     <span class="p">{</span><span class="n">AVDT_SCB_HDL_WRITE_REQ</span><span class="p">,</span>        <span class="n">AVDT_SCB_CHK_SND_PKT</span><span class="p">,</span>       <span class="n">AVDT_SCB_STREAM_ST</span><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 A2DP server handle this with bellow two actions:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//2.1 build a new media packet and stores it in the SCB.</span>
</span><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">stack</span><span class="o">/</span><span class="n">avdt</span><span class="o">/</span><span class="n">avdt_scb_act</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">1320</span> <span class="kt">void</span> <span class="n">avdt_scb_hdl_write_req</span><span class="p">(</span><span class="n">tAVDT_SCB</span> <span class="o">*</span><span class="n">p_scb</span><span class="p">,</span> <span class="n">tAVDT_SCB_EVT</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//2.2 send this stored media packet to L2CAP layer.</span>
</span><span class='line'><span class="mi">1921</span> <span class="kt">void</span> <span class="n">avdt_scb_chk_snd_pkt</span><span class="p">(</span><span class="n">tAVDT_SCB</span> <span class="o">*</span><span class="n">p_scb</span><span class="p">,</span> <span class="n">tAVDT_SCB_EVT</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span>
</span><span class='line'>  <span class="n">avdt_ad_write_req</span><span class="p">(</span><span class="n">AVDT_CHAN_MEDIA</span><span class="p">,</span> <span class="n">p_scb</span><span class="o">-&gt;</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">p_scb</span><span class="p">,</span> <span class="n">p_pkt</span><span class="p">);</span>
</span><span class='line'>      <span class="n">L2CA_DataWrite</span><span class="p">(</span><span class="n">avdt_cb</span><span class="p">.</span><span class="n">ad</span><span class="p">.</span><span class="n">rt_tbl</span><span class="p">[</span><span class="n">avdt_ccb_to_idx</span><span class="p">(</span><span class="n">p_ccb</span><span class="p">)][</span><span class="n">tcid</span><span class="p">].</span><span class="n">lcid</span><span class="p">,</span> <span class="n">p_buf</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>3 L2CAP to HCI layer</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">bluedroid</span><span class="o">/</span><span class="n">stack</span><span class="o">/</span><span class="n">l2cap</span><span class="o">/</span><span class="n">l2c_api</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="mi">1633</span> <span class="n">UINT8</span> <span class="n">L2CA_DataWrite</span> <span class="p">(</span><span class="n">UINT16</span> <span class="n">cid</span><span class="p">,</span> <span class="n">BT_HDR</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span>
</span><span class='line'><span class="mi">1636</span>     <span class="k">return</span> <span class="n">l2c_data_write</span> <span class="p">(</span><span class="n">cid</span><span class="p">,</span> <span class="n">p_data</span><span class="p">,</span> <span class="n">L2CAP_FLUSHABLE_CH_BASED</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">p_ccb</span> <span class="o">=</span> <span class="n">l2cu_find_ccb_by_cid</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">cid</span><span class="p">);</span>
</span><span class='line'>                  <span class="n">l2c_csm_execute</span> <span class="p">(</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">L2CEVT_L2CA_DATA_WRITE</span><span class="p">,</span> <span class="n">p_data</span><span class="p">);</span>
</span><span class='line'>                      <span class="mi">935</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">l2c_csm_open</span> <span class="p">(</span><span class="n">tL2C_CCB</span> <span class="o">*</span><span class="n">p_ccb</span><span class="p">,</span> <span class="n">UINT16</span> <span class="n">event</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span><span class="c1">//Just consider channel connected state</span>
</span><span class='line'>                      <span class="mi">1050</span>     <span class="k">case</span> <span class="nl">L2CEVT_L2CA_DATA_WRITE:</span>                    <span class="cm">/* Upper layer data to send */</span>
</span><span class='line'>                      <span class="mi">1051</span>         <span class="n">l2c_enqueue_peer_data</span> <span class="p">(</span><span class="n">p_ccb</span><span class="p">,</span> <span class="p">(</span><span class="n">BT_HDR</span> <span class="o">*</span><span class="p">)</span><span class="n">p_data</span><span class="p">);</span>
</span><span class='line'>                      <span class="mi">1052</span>         <span class="n">l2c_link_check_send_pkts</span> <span class="p">(</span><span class="n">p_ccb</span><span class="o">-&gt;</span><span class="n">p_lcb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                      <span class="mi">1053</span>         <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                              <span class="n">l2c_link_check_send_pkts</span> <span class="p">(</span><span class="n">p_lcb</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>                                  <span class="n">l2c_link_send_to_lower</span> <span class="p">(</span><span class="n">p_lcb</span><span class="p">,</span> <span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'>                                  <span class="mi">1341</span> <span class="err">#</span><span class="k">if</span> <span class="n">BLE_INCLUDED</span> <span class="o">==</span> <span class="n">TRUE</span>
</span><span class='line'>                                  <span class="mi">1342</span>         <span class="k">if</span> <span class="p">(</span><span class="n">p_lcb</span><span class="o">-&gt;</span><span class="n">is_ble_link</span><span class="p">)</span>
</span><span class='line'>                                  <span class="mi">1344</span>             <span class="n">L2C_LINK_SEND_BLE_ACL_DATA</span><span class="p">(</span><span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'>                                  <span class="mi">1346</span>         <span class="k">else</span>
</span><span class='line'>                                  <span class="mi">1349</span>             <span class="n">L2C_LINK_SEND_ACL_DATA</span> <span class="p">(</span><span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'>                                                      <span class="n">bte_main_hci_send</span><span class="p">((</span><span class="n">BT_HDR</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span><span class="p">),</span> <span class="n">BT_EVT_TO_LM_HCI_ACL</span><span class="p">);</span>
</span><span class='line'>                                                          <span class="n">bt_hc_if</span><span class="o">-&gt;</span><span class="n">transmit_buf</span><span class="p">((</span><span class="n">TRANSAC</span><span class="p">)</span><span class="n">p_msg</span><span class="p">,</span> <span class="err">\</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">p_msg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span><span class="n">p_msg</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>                                                              <span class="n">bluedroid</span><span class="o">/</span><span class="n">hci</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">bt_hci_bdroid</span><span class="p">.</span><span class="nl">c:</span><span class="mi">249</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">transmit_buf</span><span class="p">(</span><span class="n">TRANSAC</span> <span class="n">transac</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p_buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'>                                                                  <span class="n">utils_enqueue</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tx_q</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">transac</span><span class="p">);</span>
</span><span class='line'>                                                                  <span class="n">bthc_signal_event</span><span class="p">(</span><span class="n">HC_EVENT_TX</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>4 HCI content write to hardware device driver</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mi">339</span> <span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="n">bt_hc_worker_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">events</span> <span class="o">&amp;</span> <span class="n">HC_EVENT_TX</span><span class="p">)</span>
</span><span class='line'>          <span class="n">p_hci_if</span><span class="o">-&gt;</span><span class="n">send</span><span class="p">(</span><span class="n">sending_msg_que</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="mi">593</span> <span class="kt">void</span> <span class="n">hci_h4_send_msg</span><span class="p">(</span><span class="n">HC_BT_HDR</span> <span class="o">*</span><span class="n">p_msg</span><span class="p">)</span>
</span><span class='line'>              <span class="n">bytes_sent</span> <span class="o">=</span> <span class="n">userial_write</span><span class="p">(</span><span class="n">event</span><span class="p">,(</span><span class="n">uint8_t</span> <span class="o">*</span><span class="p">)</span> <span class="n">p</span><span class="p">,</span><span class="n">bytes_to_send</span><span class="p">);</span>
</span><span class='line'>                   <span class="n">ret</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">userial_cb</span><span class="p">.</span><span class="n">fd</span><span class="p">,</span> <span class="n">p_data</span><span class="o">+</span><span class="n">total</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Item C. Incoming data/event path:</h3>

<p>0 Init vendor (BT chip vendor, like MRVL/TI) implement of bt_vendor_interface_t interface.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>  <span class="mi">187</span> <span class="kt">void</span> <span class="n">init_vnd_if</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">local_bdaddr</span><span class="p">)</span>
</span><span class='line'>          <span class="n">dlhandle</span> <span class="o">=</span> <span class="n">dlopen</span><span class="p">(</span><span class="s">&quot;libbt-vendor.so&quot;</span><span class="p">,</span> <span class="n">RTLD_NOW</span><span class="p">);</span>               
</span><span class='line'>          <span class="n">GLOBAL</span> <span class="n">bt_vendor_interface_t</span> <span class="o">*</span><span class="n">bt_vnd_if</span> <span class="o">=</span> <span class="p">(</span><span class="n">bt_vendor_interface_t</span> <span class="o">*</span><span class="p">)</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">dlhandle</span><span class="p">,</span> <span class="s">&quot;BLUETOOTH_VENDOR_LIB_INTERFACE&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">bt_vnd_if</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">vnd_callbacks</span><span class="p">,</span> <span class="n">local_bdaddr</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>  <span class="mi">306</span> <span class="n">uint8_t</span> <span class="n">userial_open</span><span class="p">(</span><span class="n">uint8_t</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'>          <span class="n">result</span> <span class="o">=</span> <span class="n">bt_vendor_interface_t</span> <span class="o">*</span> <span class="n">bt_vnd_if</span><span class="o">-&gt;</span><span class="n">op</span><span class="p">(</span><span class="n">BT_VND_OP_USERIAL_OPEN</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fd_array</span><span class="p">);</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">bt_vnd_mrvl_if_op</span><span class="p">(</span><span class="n">bt_vendor_opcode_t</span> <span class="n">opcode</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">param</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">mchar_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/dev/mbtchar0&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span><span class='line'>  <span class="mi">363</span>     <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">userial_cb</span><span class="p">.</span><span class="n">read_thread</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">thread_attr</span><span class="p">,</span> <span class="n">userial_read_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>1 Got a packet from hardware device driver, in HCI layer.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">bluedroid</span><span class="o">/</span><span class="n">hci</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">userial</span><span class="p">.</span><span class="nl">c:</span><span class="mi">210</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="n">userial_read_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rx_length</span> <span class="o">=</span> <span class="n">select_read</span><span class="p">(</span><span class="n">userial_cb</span><span class="p">.</span><span class="n">fd</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">READ_LIMIT</span><span class="p">);</span>
</span><span class='line'>      <span class="n">ret</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">pbuf</span><span class="p">,</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>  <span class="n">utils_enqueue</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">userial_cb</span><span class="p">.</span><span class="n">rx_q</span><span class="p">),</span> <span class="n">p_buf</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//bluedroid/hci/src/bt_hci_bdroid.c</span>
</span><span class='line'>  <span class="n">bthc_signal_event</span><span class="p">(</span><span class="n">HC_EVENT_RX</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 Transfer this to L2CAP layer.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">bluedroid</span><span class="o">/</span><span class="n">hci</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">bt_hci_bdroid</span><span class="p">.</span><span class="n">c</span>  
</span><span class='line'><span class="mi">339</span> <span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="n">bt_hc_worker_thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">events</span> <span class="o">&amp;</span> <span class="n">HC_EVENT_RX</span><span class="p">)</span>
</span><span class='line'>       <span class="n">p_hci_if</span><span class="o">-&gt;</span><span class="n">rcv</span><span class="p">();</span>
</span><span class='line'>          <span class="n">uint16_t</span> <span class="n">hci_h4_receive_msg</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="c1">//Construct HCI EVENT/ACL packets and send them to stack</span>
</span><span class='line'> <span class="mi">957</span>             <span class="k">if</span> <span class="p">(</span><span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="o">-&gt;</span><span class="n">event</span> <span class="o">!=</span> <span class="n">MSG_HC_TO_STACK_HCI_ACL</span><span class="p">)</span>
</span><span class='line'> <span class="mi">958</span>                 <span class="n">btsnoop_capture</span><span class="p">(</span><span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">);</span><span class="c1">//dump to HCI trace file/socket.</span>
</span><span class='line'> <span class="mi">960</span>             <span class="k">if</span> <span class="p">(</span><span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="o">-&gt;</span><span class="n">event</span> <span class="o">==</span> <span class="n">MSG_HC_TO_STACK_HCI_EVT</span><span class="p">)</span>
</span><span class='line'> <span class="mi">965</span>                 <span class="n">bt_hc_cbacks</span><span class="o">-&gt;</span><span class="n">data_ind</span><span class="p">((</span><span class="n">TRANSAC</span><span class="p">)</span> <span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="n">p_cb</span><span class="o">-&gt;</span><span class="n">p_rcv_msg</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">+</span> <span class="n">BT_HC_HDR_SIZE</span><span class="p">);</span>
</span><span class='line'>                          <span class="n">bluedroid</span><span class="o">/</span><span class="n">main</span><span class="o">/</span><span class="n">bte_main</span><span class="p">.</span><span class="nl">c:</span><span class="mi">504</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">data_ind</span><span class="p">(</span><span class="n">TRANSAC</span> <span class="n">transac</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p_buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'>                              <span class="n">GKI_send_msg</span> <span class="p">(</span><span class="n">BTU_TASK</span><span class="p">,</span> <span class="n">BTU_HCI_RCV_MBOX</span><span class="p">,</span> <span class="n">transac</span><span class="p">);</span><span class="c1">//handle in btu_task.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<blockquote><p></p><footer><strong>logcat:A2DP</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-init-logcat.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>air log: LMP</strong> <cite><a href='http://yongbingchen.github.com/images/bluedroid/A2DP-connect-LMP.jpg'>yongbingchen.github.com/images/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>air log: L2CAP</strong> <cite><a href='http://yongbingchen.github.com/images/bluedroid/A2DP-connect-L2CAP.jpg'>yongbingchen.github.com/images/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>source code reading note</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-source-code-reading-note.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dissect Bluedroid from A2DP: Part III: Init A2DP Service]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-iii-init-a2dp-service/"/>
    <updated>2013-05-07T04:17:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/07/dissect-bluedroid-from-a2dp-part-iii-init-a2dp-service</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://yongbingchen.github.com/images/bluedroid/init_a2dp_service.jpg" title="" >
1 Get Android defined A2DP interface btav_interface_t from bt_interface_t get_bluetooth_interface().</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="mo">04</span><span class="o">-</span><span class="mi">25</span> <span class="mo">01</span><span class="o">:</span><span class="mi">56</span><span class="o">:</span><span class="mf">30.530</span> <span class="n">I</span><span class="o">/</span><span class="n">BluetoothA2dpServiceJni</span><span class="p">(</span> <span class="mi">2093</span><span class="p">)</span><span class="o">:</span> <span class="nl">classInitNative:</span> <span class="n">succeeds</span>
</span><span class='line'><span class="n">packages</span><span class="o">/</span><span class="n">apps</span><span class="o">/</span><span class="n">Bluetooth</span><span class="o">/</span><span class="n">jni</span><span class="o">/</span><span class="n">com_android_bluetooth_a2dp</span><span class="p">.</span><span class="n">cpp</span>
</span><span class='line'><span class="mi">137</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">initNative</span><span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">object</span><span class="p">)</span>
</span><span class='line'>  <span class="n">GLOBAL</span> <span class="k">const</span> <span class="n">btav_interface_t</span> <span class="o">*</span><span class="n">sBluetoothA2dpInterface</span> <span class="o">=</span> <span class="p">(</span><span class="n">btav_interface_t</span> <span class="o">*</span><span class="p">)</span><span class="n">btInf</span><span class="o">-&gt;</span><span class="n">get_profile_interface</span><span class="p">(</span><span class="n">BT_PROFILE_ADVANCED_AUDIO_ID</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sBluetoothA2dpInterface</span><span class="o">-&gt;</span><span class="n">init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sBluetoothA2dpCallbacks</span><span class="p">);</span>
</span><span class='line'>      <span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">btif</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">btif_av</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'>      <span class="mi">725</span> <span class="k">static</span> <span class="n">bt_status_t</span> <span class="n">init</span><span class="p">(</span><span class="n">btav_callbacks_t</span><span class="o">*</span> <span class="n">callbacks</span> <span class="p">)</span>
</span><span class='line'>          <span class="mi">686</span> <span class="kt">int</span> <span class="n">btif_a2dp_start_media_task</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>              <span class="n">GKI_create_task</span><span class="p">((</span><span class="n">TASKPTR</span><span class="p">)</span><span class="n">btif_media_task</span><span class="p">,</span> <span class="n">A2DP_MEDIA_TASK</span><span class="p">,</span>
</span><span class='line'>          <span class="n">btif_enable_service</span><span class="p">(</span><span class="n">BTA_A2DP_SERVICE_ID</span><span class="p">);</span><span class="c1">//Upon BT enable, BTIF core shall invoke the BTA APIs to enable the profiles</span>
</span></code></pre></td></tr></table></div></figure>


<p>2 Init A2DP service by btav_interface_t->init().</p>

<pre><code>* Start a btif_media_task as main loop for A2DP service.
* Open a socket to listen on client's connect request from control channel.
</code></pre>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">external</span><span class="o">/</span><span class="n">bluetooth</span><span class="o">/</span><span class="n">bluedroid</span><span class="o">/</span><span class="n">btif</span><span class="o">/</span><span class="n">src</span><span class="o">/</span><span class="n">btif_media_task</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="c1">//Task for SBC encoder.  This task receives an event when the waveIn interface has a pcm data buffer ready.  On receiving the event, handle all ready pcm data buffers.  If stream is started, run the SBC encoder on each chunk of pcm samples and build an output packet consisting of one or more encoded SBC frames.</span>
</span><span class='line'><span class="mi">1066</span> <span class="kt">int</span> <span class="n">btif_media_task</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="mi">1073</span>     <span class="n">btif_media_task_init</span><span class="p">();</span>
</span><span class='line'><span class="mi">1044</span>     <span class="n">UIPC_Init</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="mi">606</span> <span class="n">UDRV_API</span> <span class="kt">void</span> <span class="n">UIPC_Init</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">p_data</span><span class="p">)</span>
</span><span class='line'>              <span class="mi">569</span> <span class="kt">int</span> <span class="n">uipc_start_main_server_thread</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>                  <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">uipc_main</span><span class="p">.</span><span class="n">tid</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="n">pthread_attr_t</span> <span class="o">*</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">uipc_read_task</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'><span class="mi">1047</span>     <span class="n">UIPC_Open</span><span class="p">(</span><span class="n">UIPC_CH_ID_AV_CTRL</span> <span class="p">,</span> <span class="n">btif_a2dp_ctrl_cb</span><span class="p">);</span>
</span><span class='line'>          <span class="n">uipc_setup_server_locked</span><span class="p">(</span><span class="n">ch_id</span><span class="p">,</span> <span class="n">A2DP_CTRL_PATH</span><span class="p">,</span> <span class="n">p_cback</span><span class="p">);</span><span class="c1">//This is the control socket that listen on A2DP client.</span>
</span><span class='line'><span class="mi">1079</span>     <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="c1">//A2DP event loop </span>
</span><span class='line'><span class="mi">1080</span>     <span class="p">{</span>
</span><span class='line'><span class="mi">1085</span>         <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">&amp;</span> <span class="n">BTIF_MEDIA_TASK_CMD</span><span class="p">)</span>
</span><span class='line'><span class="mi">1090</span>                 <span class="n">btif_media_task_handle_cmd</span><span class="p">(</span><span class="n">p_msg</span><span class="p">);</span>
</span><span class='line'><span class="mi">1093</span>
</span><span class='line'><span class="mi">1094</span>         <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">&amp;</span> <span class="n">BTIF_MEDIA_TASK_DATA</span><span class="p">)</span>
</span><span class='line'><span class="mi">1099</span>                 <span class="n">btif_media_task_handle_media</span><span class="p">(</span><span class="n">p_msg</span><span class="p">);</span>
</span><span class='line'><span class="mi">1102</span>
</span><span class='line'><span class="mi">1103</span>         <span class="k">if</span> <span class="p">(</span><span class="n">event</span> <span class="o">&amp;</span> <span class="n">BTIF_MEDIA_AA_TASK_TIMER</span><span class="p">)</span>
</span><span class='line'><span class="mi">1105</span>             <span class="cm">/* advance audio timer expiration */</span>
</span><span class='line'><span class="mi">1106</span>             <span class="n">btif_media_task_aa_handle_timer</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<blockquote><p></p><footer><strong>logcat:A2DP</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-init-logcat.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>air log: LMP</strong> <cite><a href='http://yongbingchen.github.com/images/bluedroid/A2DP-connect-LMP.jpg'>yongbingchen.github.com/images/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>air log: L2CAP</strong> <cite><a href='http://yongbingchen.github.com/images/bluedroid/A2DP-connect-L2CAP.jpg'>yongbingchen.github.com/images/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>source code reading note</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-source-code-reading-note.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dissect Bluedroid from A2DP: Part II: Init Bluetooth Adapter]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/04/dissect-bluedroid-from-a2dp-part-ii-init-bluetooth-adapter/"/>
    <updated>2013-05-04T02:37:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/04/dissect-bluedroid-from-a2dp-part-ii-init-bluetooth-adapter</id>
    <content type="html"><![CDATA[<p>Android defined one interface bt_interface_t to control a Bluetooth Adapter, Bluedroid implemented this interface as &#8220;static const bt_interface_t bluetoothInterface&#8221; in external/bluetooth/bluedroid/btif/src/bluetooth.c.</p>

<p><img class="center" src="http://yongbingchen.github.com/images/bluedroid/init_bt_adapter.jpg" title="" ></p>

<blockquote><p></p><footer><strong>logcat:A2DP</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-init-logcat.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dissect Bluedroid from A2DP  Part I: use case]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/05/03/dissect-bluedroid-from-a2dp-part-i-use-case/"/>
    <updated>2013-05-03T22:05:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/05/03/dissect-bluedroid-from-a2dp-part-i-use-case</id>
    <content type="html"><![CDATA[<p>Android framework defined two hardware interfaces for operating audio output devices, they are audio_hw_device_t and audio_stream_out_t, AudioFlinger is the only user of these interfaces. Bluedroid implemented these two interface in external/bluetooth/bluedroid/audio_a2dp_hw/audio_a2dp_hw.c, AudioFlinger can output audio sample to a connected A2DP sink device if this implementation has been registered to Android.</p>

<p><img src="http://yongbingchen.github.com/images/bluedroid/A2dp_use_case.jpg" title="" ></p>

<p>In Bluedroid&#8217;s A2DP hardware implementation, it will use two sockets to communicate with A2DP server.</p>

<p><img class="center" src="http://yongbingchen.github.com/images/bluedroid/audio_a2dp_hw_bluedroid.jpg" title="" ></p>

<p>Reference:</p>

<blockquote><p></p><footer><strong>Source Code</strong> <cite><a href='http://androidxref.com/4.2.2_r1'>androidxref.com/4.2.2_r1/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>logcat:A2DP</strong> <cite><a href='http://yongbingchen.github.com/txt/bluedroid/a2dp-init-logcat.txt'>yongbingchen.github.com/txt/&hellip;</a></cite></footer></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Skeleton of a Bluetooth SDIO driver]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/04/23/skeleton-of-a-bluetooth-sdio-driver/"/>
    <updated>2013-04-23T05:28:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/04/23/skeleton-of-a-bluetooth-sdio-driver</id>
    <content type="html"><![CDATA[<p>A Bluetooth SDIO card driver talks with hardware through SDIO interface, providing R/W method for Bluetooth Adapter layer, here&#8217;s the class diagram for this relationship:</p>

<p><img src="http://yongbingchen.github.com/images/bt_drv/bt_drv_class_diagram.jpg" title="" ></p>

<p>The outbound Bluetooth data path:</p>

<ol>
<li>Upper layer use HCI interface send() to send data/command packet, implemented as btmrvl_send_frame() in this driver.</li>
<li>Put this packet in adapter&#8217;s tx queue, wakeup the main data processing thread (like NAPI in a network driver, thread function is btmrvl_service_main_thread()).</li>
<li>In main data procssing thread, re-organize skb data payload for DMA transfer (in btmrvl_tx_pkt()).</li>
<li>Call sdio_writesb() to write data to hardware (in btmrvl_sdio_host_to_card()).</li>
</ol>


<p>The incoming Bluetooth data path:</p>

<ol>
<li>SDIO card received a data packet, triggered a interrupt to host.</li>
<li>The SDIO ISR triggred the main data processing thread.</li>
<li>In this thread, allocate a skb with DAM aligned, call sdio_readsb() to read the data from SDIO interface (in btmrvl_sdio_card_to_host()).</li>
<li>Call hci_recv_frame(skb) to send this data packet to upper layer Bluetooth stack.</li>
</ol>


<p>Appendix: How to register a driver specific ISR to SDIO&#8217;s ISR:</p>

<figure class='code'><figcaption><span>In driver module init, hook up a device ISR to SDIO&#8217;s ISR.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="kt">int</span> <span class="n">__init</span> <span class="nf">btmrvl_sdio_init_module</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">--&gt;</span><span class="n">sdio_register_driver</span><span class="p">(</span><span class="o">&amp;</span><span class="n">bt_mrvl_sdio</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span>
</span><span class='line'>      <span class="o">--&gt;</span><span class="n">btmrvl_sdio_probe</span><span class="p">(</span><span class="k">struct</span> <span class="n">sdio_func</span> <span class="o">*</span><span class="n">func</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sdio_device_id</span> <span class="o">*</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>          <span class="o">|</span>
</span><span class='line'>          <span class="o">|</span>
</span><span class='line'>          <span class="o">--&gt;</span><span class="n">sdio_claim_irq</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="n">btmrvl_sdio_interrupt</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>In this ISR, wake up main data pocessing thread to read data from card.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="kt">void</span> <span class="nf">btmrvl_sdio_interrupt</span><span class="p">(</span><span class="k">struct</span> <span class="n">sdio_func</span> <span class="o">*</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">|</span>
</span><span class='line'>    <span class="o">--&gt;</span><span class="n">btmrvl_interrupt</span><span class="p">(</span><span class="n">priv</span><span class="p">);</span>
</span><span class='line'>      <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span>
</span><span class='line'>      <span class="o">--&gt;</span><span class="n">wake_up_interruptible</span><span class="p">(</span><span class="o">&amp;</span><span class="n">priv</span><span class="o">-&gt;</span><span class="n">main_thread</span><span class="p">.</span><span class="n">wait_q</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Source Code:</p>

<blockquote><p></p><footer><strong>@btmrvl_sdio.c</strong> <cite><a href='http://lxr.linux.no/linux+v3.8.8/drivers/bluetooth/btmrvl_sdio.c'>lxr.linux.no/linux+v3.8.8/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>@btmrvl_main.c</strong> <cite><a href='http://lxr.linux.no/linux+v3.8.8/drivers/bluetooth/btmrvl_main.c'>lxr.linux.no/linux+v3.8.8/&hellip;</a></cite></footer></blockquote>


<h2>Note: How to load firmware for a SDIO device</h2>

<figure class='code'><figcaption><span>1. Disable interrupt from this SDIO device.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sdio_claim_host</span><span class="p">(</span><span class="n">card</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">);</span>
</span><span class='line'><span class="n">btmrvl_sdio_disable_host_int</span><span class="p">(</span><span class="n">card</span><span class="p">);</span>
</span><span class='line'>  <span class="n">host_int_mask</span> <span class="o">=</span> <span class="n">sdio_readb</span><span class="p">(</span><span class="n">card</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">,</span> <span class="n">card</span><span class="o">-&gt;</span><span class="n">reg</span><span class="o">-&gt;</span><span class="n">host_int_mask</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ret</span><span class="p">);</span>
</span><span class='line'>  <span class="n">host_int_mask</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">HIM_DISABLE</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sdio_writeb</span><span class="p">(</span><span class="n">card</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">,</span> <span class="n">host_int_mask</span><span class="p">,</span> <span class="n">card</span><span class="o">-&gt;</span><span class="n">reg</span><span class="o">-&gt;</span><span class="n">host_int_mask</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ret</span><span class="p">);</span>
</span><span class='line'><span class="n">sdio_release_host</span><span class="p">(</span><span class="n">card</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>2. Get and Write firmware.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sdio_claim_host</span><span class="p">(</span><span class="n">card</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//Get firmware from user space.</span>
</span><span class='line'>  <span class="n">request_firmware</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fw_firmware</span><span class="p">,</span> <span class="n">card</span><span class="o">-&gt;</span><span class="n">firmware</span><span class="p">,</span><span class="c1">//name of firmware file, = &quot;mrvl/sd8787_uapsta.bin&quot;,</span>
</span><span class='line'>          <span class="o">&amp;</span><span class="n">card</span><span class="o">-&gt;</span><span class="n">func</span><span class="o">-&gt;</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//Write firmware into SDIO device, check firmware status.</span>
</span><span class='line'>  <span class="n">tmpfwbufsz</span> <span class="o">=</span> <span class="n">ALIGN_SZ</span><span class="p">(</span><span class="n">BTM_UPLD_SIZE</span><span class="p">,</span> <span class="n">BTSDIO_DMA_ALIGN</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fwbuf</span> <span class="o">=</span> <span class="p">(</span><span class="n">u8</span> <span class="o">*</span><span class="p">)</span> <span class="n">ALIGN_ADDR</span><span class="p">(</span><span class="n">tmpfwbuf</span><span class="p">,</span> <span class="n">BTSDIO_DMA_ALIGN</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">fwbuf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">firmware</span><span class="p">[</span><span class="n">offset</span><span class="p">],</span> <span class="n">txlen</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sdio_writesb</span><span class="p">(</span><span class="n">card</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">,</span> <span class="n">card</span><span class="o">-&gt;</span><span class="n">ioport</span><span class="p">,</span> <span class="n">fwbuf</span><span class="p">,</span><span class="n">tx_blocks</span> <span class="o">*</span> <span class="n">blksz_dl</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">//Release firmware related resource in kernel.</span>
</span><span class='line'>  <span class="n">release_firmware</span><span class="p">(</span><span class="n">fw_firmware</span><span class="p">);</span>
</span><span class='line'><span class="n">sdio_release_host</span><span class="p">(</span><span class="n">card</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively, you can use request_firmware_nowait() if current thread is not allowed to sleep for a long time.</p>

<figure class='code'><figcaption><span>3. Enable SDIO device interrupt.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">btmrvl_sdio_enable_host_int</span><span class="p">(</span><span class="n">card</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<blockquote><p></p><footer><strong>@How request_firmware() works</strong> <cite><a href='http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/firmware_class/README?id=HEAD'>git.kernel.org/cgit/linux/git/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>@Default firmware search path in Android</strong> <cite><a href='http://stackoverflow.com/questions/6019915/kernel-module-cannot-find-firmware-file-where-should-it-be'>stackoverflow.com/questions/&hellip;</a></cite></footer></blockquote>




<figure class='code'><figcaption><span>$Jellybean/system/core/init/devices.c  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define SYSFS_PREFIX    &quot;/sys&quot;</span>
</span><span class='line'><span class="cp">#define FIRMWARE_DIR1   &quot;/etc/firmware&quot;</span>
</span><span class='line'><span class="n">asprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">root</span><span class="p">,</span> <span class="n">SYSFS_PREFIX</span><span class="s">&quot;%s/&quot;</span><span class="p">,</span> <span class="n">uevent</span><span class="o">-&gt;</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'><span class="n">asprintf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">file1</span><span class="p">,</span> <span class="n">FIRMWARE_DIR1</span><span class="s">&quot;/%s&quot;</span><span class="p">,</span> <span class="n">uevent</span><span class="o">-&gt;</span><span class="n">firmware</span><span class="p">);</span>
</span><span class='line'><span class="n">fw_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">file1</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Footnote: sdio_claim_host(card->func)</h1>

<ol>
<li>card->func means an independent function residues in same card (there maybe different functions implemented in same card simultaneously, like BT and Wifi in MRVL 8787 module. The device field in struct sdio_device_id is used as function id to distinguish these functions, in this driver, the device field in driver is 0x911B for MRVL_BT_SD8787, it reflected as:
0x911b in /sys/class/mmc_host/mmc1/mmc1\:0001/mmc1\:0001\:3/device.</li>
<li>sdio_claim_host() is acting like a lock, I guess this will serialize access to same SD device between different functions, and also between different threads inside same function.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git: check ancestor]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/03/25/git-check-ancestor/"/>
    <updated>2013-03-25T22:59:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/03/25/git-check-ancestor</id>
    <content type="html"><![CDATA[<p>If you want to check your code base, it&#8217;s wrong to rely on whether the output of <code>git log $CODE_BASE_TAG..HEAD</code> is empty.</p>

<p>Suppose we have a git version tree as below:</p>

<p><img src="http://yongbingchen.github.com/images/git/version-graph.jpg" title="" ></p>

<p>DevBranch0 is branched out from Trunk, merged <code>Trunk</code> node C and <code>DevBranch0</code> node b, current HEAD is <code>DevBranch0_c</code>.</p>

<p>The git history is as below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yongbing@ubuntu:~/work/git_ancestor$ git log --oneline --graph
</span><span class='line'>* 368cfb1 DevBranch0_c
</span><span class='line'>*   6fecd0a DevBranch0_Merge
</span><span class='line'>|\
</span><span class='line'>| * defff5c Trunk_C
</span><span class='line'>| * 5037bca Trunk_B
</span><span class='line'>* | 0f45ab0 DevBranch0_b
</span><span class='line'>* | 38f9ec9 DevBranch0_a
</span><span class='line'>|/
</span><span class='line'>* fc18378 Trunk_A
</span><span class='line'>* 0d3b0bd Init state</span></code></pre></td></tr></table></div></figure>


<p>Clearly version <code>Trunk_D</code> is not an ancestor of <code>DevBranch0_c</code>, but <code>git log $Trunk_D..HEAD</code> is not empty:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yongbing@ubuntu:~/work/git_ancestor$ git tag Trunk_D b25477d
</span><span class='line'>yongbing@ubuntu:~/work/git_ancestor$ git log Trunk_D..HEAD --oneline
</span><span class='line'>368cfb1 DevBranch0_c
</span><span class='line'>6fecd0a DevBranch0_Merge
</span><span class='line'>0f45ab0 DevBranch0_b
</span><span class='line'>38f9ec9 DevBranch0_a</span></code></pre></td></tr></table></div></figure>


<p>The correct way is to use <code>git rev-list</code> command, then grep the result to see if the code base in really in the ancestor list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yongbing@ubuntu:~/work/git_ancestor$ git log -g --oneline
</span><span class='line'>b25477d HEAD@{1}: commit: Trunk_D
</span><span class='line'>5037bca HEAD@{9}: commit: Trunk_B
</span><span class='line'>yongbing@ubuntu:~/work/git_ancestor$ git rev-list -n 10 HEAD |grep 5037bca
</span><span class='line'>5037bca575ecbf76d9c9d939e52f8858dbaadfe1
</span><span class='line'>yongbing@ubuntu:~/work/git_ancestor$ git rev-list -n 10 HEAD |grep b25477d
</span><span class='line'>//Empty output</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EXODUS]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/03/24/exodus/"/>
    <updated>2013-03-24T19:09:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/03/24/exodus</id>
    <content type="html"><![CDATA[<blockquote><p>‘I am the LORD, and I will bring you out from under the burdens of the Egyptians, and I will deliver you from slavery to them, and  I will redeem you with an outstretched arm and with great acts of judgment. I  will take you to be my people, and  I will be your God, and you shall know that  I am the LORD your God, who has brought you out from under the burdens of the Egyptians. I will bring you into the land that I swore to give to Abraham, to Isaac, and to Jacob. I will give it to you for a possession.  I am the LORD.’</p><footer><strong>EXODUS 6</strong></footer></blockquote>




<blockquote><p>They set out from Elim, and all the congregation of the people of Israel came to the wilderness of Sin, which is between Elim and Sinai, on the fifteenth day of the second month after they had departed from the land of Egypt. And the whole congregation of the people of Israel grumbled against Moses and Aaron in the wilderness, and the people of Israel said to them,  “Would that we had died by the hand of the LORD in the land of Egypt,  when we sat by the meat pots and ate bread to the full, for you have brought us out into this wilderness to kill this whole assembly with hunger.”</p><footer><strong>EXODUS 16</strong></footer></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refresh memo: how a process accesses physical memory]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/03/23/memo-how-a-process-accesses-physical-memory/"/>
    <updated>2013-03-23T21:39:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/03/23/memo-how-a-process-accesses-physical-memory</id>
    <content type="html"><![CDATA[<p>Scenario: a process acquired a new block of memory, then try to access part of this block:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">1024</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">buf</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>                <span class="o">*</span><span class="p">(</span><span class="n">buf</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0xfe</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What happens in malloc():</p>

<ol>
<li>stdlib will try to handle it internally, if can&#8217;t satisfy this request, then,</li>
<li>Call sbrk() to let kernel enlarge current process&#8217;s heap space (by adjust process&#8217;s VMAs).</li>
</ol>


<p>What happens next when try to access the memory:</p>

<ol>
<li>CPU&#8217;s MMU use this virtual address to look up in current CPU&#8217;s TLB, not found.</li>
<li>Then MMU switch to look up this address in process&#8217;s Page Table, try to do the virtual-to-physical address translation.</li>
<li>Step 2 will fail, a Page Fault exception happens.

<ul>
<li>In Page Fault exception handler, check if current process has write permission to this address, that&#8217;s done by check process&#8217;s VMA list.</li>
<li>Allocate a physical page, update process&#8217;s Page Table for this page.</li>
</ul>
</li>
<li>After the exception handler returned, and the process get scheduled to execute again, it will retry the instruction that caused the Page Fault, this time will get correct physical address pointed to the new page. Update TLB entry for this new map.</li>
<li>Select proper line in Cache for this physical address, write the new value to Cache, then hardware will write back this new value from Cache to real memory at proper time.</li>
</ol>


<blockquote><p></p><footer><strong>@How Xscale Handle Cache Miss</strong> <cite><a href='http://www.cs.uiuc.edu/homes/luddy/PROCESSORS/XScaleMMX.pdf'>www.cs.uiuc.edu/homes/luddy/&hellip;</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read e-EDID with clock stretching]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/03/11/read-e-edid-with-clock-stretching/"/>
    <updated>2013-03-11T17:00:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/03/11/read-e-edid-with-clock-stretching</id>
    <content type="html"><![CDATA[<h2>Read e-EDID with master clock stretching</h2>

<p>In E-DDC, a special I²C addressing scheme was introduced, in which multiple 256-byte segments could be selected. To do this, a single 8-bit segment index is passed to the display via the I²C address 30h. (Because this access is always a write, the first I²C octet will always be 60h.).</p>

<p>In my MHL project, this first write will always get an I2C NO_ACK error(E-DDC need tolerate with NO_ACK error for this write, to be back-compatible with legacy DDC, so we are using GPIO to simulate I2C, instead of using standard I2C controller).</p>

<p>From below signal, we found the ACK actually came, but master did not acquire it at that time, that&#8217;s exactly what clock stretching targeted at.</p>

<p><img src="http://yongbingchen.github.com/images/edid/write_0x60_clock_stretch.jpg" title="" ></p>

<p>Add clock stretching logic in our GPIO simulation function, then can successfully read all e-EDID segments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending a signal from Linux kernel]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/03/11/sending-a-signal-from-linux-kernel/"/>
    <updated>2013-03-11T06:17:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/03/11/sending-a-signal-from-linux-kernel</id>
    <content type="html"><![CDATA[<p><strong>Send SIGUSR1 from kernel</strong></p>

<p>I want to use a signal to inform an asynchronous event from one kernel module to a user space application.</p>

<p>To achieve this, add below code in kernel driver:</p>

<figure class='code'><figcaption><span>patch on kernel module  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">linux</span><span class="o">/</span><span class="n">sched</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">asm</span><span class="o">/</span><span class="n">siginfo</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">linux</span><span class="o">/</span><span class="n">pid_namespace</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">linux</span><span class="o">/</span><span class="n">pid</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">enum</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'><span class="o">+</span>       <span class="n">THIS_MODULE_IOCTL_SET_OWNER</span> <span class="o">=</span> <span class="mh">0x111</span><span class="p">,</span>
</span><span class='line'> <span class="p">}</span><span class="n">MODULE_IOCTL_CMD</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="kt">int</span> <span class="n">owner</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="k">struct</span> <span class="n">task_struct</span> <span class="o">*</span> <span class="n">current_task</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="kt">void</span> <span class="n">send_signal</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig_num</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>       <span class="k">if</span> <span class="p">(</span><span class="n">owner</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span>               <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">printk</span><span class="p">(</span><span class="s">&quot;%s,%d.sending to owner %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">__func__</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">,</span> <span class="n">owner</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="k">struct</span> <span class="n">siginfo</span> <span class="n">info</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">info</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">siginfo</span><span class="p">));</span>
</span><span class='line'><span class="o">+</span>       <span class="n">info</span><span class="p">.</span><span class="n">si_signo</span> <span class="o">=</span> <span class="n">sig_num</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">info</span><span class="p">.</span><span class="n">si_code</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">info</span><span class="p">.</span><span class="n">si_int</span> <span class="o">=</span> <span class="mi">1234</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="k">if</span> <span class="p">(</span><span class="n">current_task</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>               <span class="n">rcu_read_lock</span><span class="p">();</span>
</span><span class='line'><span class="o">+</span>               <span class="n">current_task</span> <span class="o">=</span> <span class="n">pid_task</span><span class="p">(</span><span class="n">find_vpid</span><span class="p">(</span><span class="n">owner</span><span class="p">),</span> <span class="n">PIDTYPE_PID</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>               <span class="n">rcu_read_unlock</span><span class="p">();</span>
</span><span class='line'><span class="o">+</span>       <span class="p">}</span>
</span><span class='line'><span class="o">+</span>       <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">send_sig_info</span><span class="p">(</span><span class="n">sig_num</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">info</span><span class="p">,</span> <span class="n">current_task</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="o">+</span>               <span class="n">printk</span><span class="p">(</span><span class="s">&quot;error sending signal</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="p">}</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'> <span class="k">static</span> <span class="kt">int</span> <span class="n">device_event_handler</span><span class="p">(</span><span class="k">struct</span> <span class="n">snd_pcm_substream</span> <span class="o">*</span><span class="n">substream</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cmd</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">cmd</span> <span class="o">==</span> <span class="n">INTRESTED_EVENT</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="o">+</span>                       <span class="n">send_signal</span><span class="p">(</span><span class="n">SIGUSR1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="err">@@</span> <span class="o">-</span><span class="mi">325</span><span class="p">,</span><span class="mi">6</span> <span class="o">+</span><span class="mi">352</span><span class="p">,</span><span class="mi">13</span> <span class="err">@@</span> <span class="k">static</span> <span class="kt">long</span> <span class="n">device_ioctl</span><span class="p">(</span><span class="k">struct</span> <span class="n">file</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span>
</span><span class='line'><span class="o">+</span>       <span class="k">case</span> <span class="n">THIS_MODULE_IOCTL_SET_OWNER</span>:
</span><span class='line'><span class="o">+</span>               <span class="n">printk</span><span class="p">(</span><span class="s">&quot;%s, owner pid %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">__func__</span><span class="p">,</span> <span class="n">owner</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>               <span class="k">if</span><span class="p">(</span><span class="n">copy_from_user</span><span class="p">(</span><span class="o">&amp;</span><span class="n">owner</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">))){</span>
</span><span class='line'><span class="o">+</span>                       <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">EFAULT</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>               <span class="p">}</span>
</span><span class='line'><span class="o">+</span>               <span class="n">current_task</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>               <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">&quot;GPL&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>In user space application, set its pid to kernel module, then listen on the signal.</p>

<figure class='code'><figcaption><span>patch on user application  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">pthread</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">semaphore</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">signal</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="n">sem_t</span> <span class="n">event_sem</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="k">volatile</span> <span class="kt">sig_atomic_t</span> <span class="n">intrested_event</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="kt">void</span> <span class="n">sig_handler_event1</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>       <span class="n">interested_event</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">sem_post</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event_sem</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">event_handler_thread_func</span><span class="p">()</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>        <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>                <span class="n">sem_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event_sem</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>                <span class="k">if</span> <span class="p">(</span><span class="n">intrested_event</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>                        <span class="n">LOGD</span><span class="p">(</span><span class="s">&quot;%s,%d, received intrested_event signal.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">__func__</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>                        <span class="n">intrested_event</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>                <span class="p">}</span>
</span><span class='line'><span class="o">+</span>        <span class="p">}</span>
</span><span class='line'><span class="o">+</span>        <span class="n">pthread_exit</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="o">+</span>               <span class="n">pthread_t</span> <span class="n">event_thread</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>               <span class="k">if</span> <span class="p">(</span><span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event_thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">event_handler_thread_func</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Thread create failed%s.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'><span class="o">+</span>                  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>               <span class="p">}</span>
</span><span class='line'><span class="o">+</span>               <span class="n">sem_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event_sem</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span>               <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">usr_action</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>               <span class="n">sigset_t</span> <span class="n">block_mask</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>               <span class="n">sigfillset</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">block_mask</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>               <span class="n">usr_action</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">sig_handler_event1</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>               <span class="n">usr_action</span><span class="p">.</span><span class="n">sa_mask</span> <span class="o">=</span> <span class="n">block_mask</span><span class="p">;</span><span class="c1">//block all signal inside signal handler.</span>
</span><span class='line'><span class="o">+</span>               <span class="n">usr_action</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="n">SA_NODEFER</span><span class="p">;</span><span class="c1">//do not block SIGUSR1 within sig_handler_int.</span>
</span><span class='line'><span class="o">+</span>               <span class="n">sigaction</span> <span class="p">(</span><span class="n">SIGUSR1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">usr_action</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>               <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/dev/target_device_name&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>               <span class="kt">int</span> <span class="n">my_pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'><span class="o">+</span>               <span class="n">ioctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mh">0x111</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">my_pid</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>               <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>A signal could interrupt below primitive calls:
<em>close, fcntl (operation F_SETLK), open, read, recv, recvfrom, select, send, sendto, tcdrain, waitpid, wait, and write</em>,
POXIS and BSD will handle this situation differently. POXIS will fail these primitive call with EINTR, caller need to use macro TEMP_FAILURE_RETRY (expression) to retry.
Programmer need to take care of this issue.</p>

<p>Reference:</p>

<blockquote><p></p><footer><strong>@glibc-manual-0.02</strong> <cite><a href='http://www.cs.utah.edu/dept/old/texinfo/glibc-manual-0.02/library_21.html#sec349'>www.cs.utah.edu/dept/old/&hellip;</a></cite></footer></blockquote>


<blockquote><p></p><footer><strong>@ldd3</strong> <cite><a href='http://www.makelinux.net/ldd3/chp-6-sect-2'>www.makelinux.net/ldd3/&hellip;</a></cite></footer></blockquote>


<h1>Sending Signal Across Processes</h1>

<p>In receiver process, create a share memory, write receiver&#8217;s pid to it, then wait for the signal.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span>  <span class="o">&lt;</span><span class="n">signal</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span>  <span class="o">&lt;</span><span class="n">sys</span><span class="o">/</span><span class="n">ipc</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span>  <span class="o">&lt;</span><span class="n">sys</span><span class="o">/</span><span class="n">shm</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">pthread</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span> <span class="o">&lt;</span><span class="n">semaphore</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">define</span> <span class="n">MY_IPC_KEY_PATH</span> <span class="s">&quot;/data/misc/bluedroid&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="n">sem_t</span> <span class="n">event_sem</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="k">volatile</span> <span class="kt">sig_atomic_t</span> <span class="n">intrested_event</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="kt">void</span> <span class="n">sig_handler_int</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>       <span class="n">interested_event</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">sem_post</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event_sem</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="kt">void</span> <span class="n">wait_for_signal</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>       <span class="n">pid_t</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'><span class="o">+</span>       <span class="n">key_t</span> <span class="n">my_ipc_key</span>   <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="n">MY_IPC_KEY_PATH</span><span class="p">,</span> <span class="sc">&#39;s&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="kt">int</span> <span class="n">share_mem_id</span>   <span class="o">=</span> <span class="n">shmget</span><span class="p">(</span><span class="n">my_ipc_key</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">pid_t</span><span class="p">),</span> <span class="n">IPC_CREAT</span> <span class="o">|</span> <span class="mo">0666</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="n">pid_t</span> <span class="o">*</span><span class="n">share_mem</span>  <span class="o">=</span> <span class="p">(</span><span class="n">pid_t</span> <span class="o">*</span><span class="p">)</span> <span class="n">shmat</span><span class="p">(</span><span class="n">share_mem_id</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="o">*</span><span class="n">share_mem</span> <span class="o">=</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>       <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s,%d, set my pid %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>       <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">usr_action</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">sigset_t</span> <span class="n">block_mask</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">sigfillset</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">block_mask</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="n">usr_action</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">sig_handler_int</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">usr_action</span><span class="p">.</span><span class="n">sa_mask</span> <span class="o">=</span> <span class="n">block_mask</span><span class="p">;</span><span class="c1">//block all signal inside signal handler.</span>
</span><span class='line'><span class="o">+</span>       <span class="n">usr_action</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="n">SA_NODEFER</span><span class="p">;</span><span class="c1">//do not block SIGUSR1 within sig_handler_int.</span>
</span><span class='line'><span class="o">+</span>       <span class="n">sigaction</span> <span class="p">(</span><span class="n">SIGINT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">usr_action</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>       <span class="n">sem_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event_sem</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="k">while</span><span class="p">(</span><span class="n">intrested_event</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>               <span class="n">sem_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">event_sem</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>               <span class="k">if</span> <span class="p">(</span><span class="n">intrested_event</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>                       <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s,%d, received intrested_event signal.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">__func__</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>               <span class="p">}</span>
</span><span class='line'><span class="o">+</span>       <span class="p">}</span>
</span><span class='line'><span class="o">+</span>       <span class="n">intrested_event</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">shmdt</span><span class="p">(</span><span class="n">share_mem</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="n">shmctl</span><span class="p">(</span><span class="n">share_mem_id</span><span class="p">,</span> <span class="n">IPC_RMID</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">receiver_process</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span>    <span class="n">wait_for_signal</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>In sender process, acquire the receiver process&#8217;spid through the share memory object, then send the signal.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span>  <span class="o">&lt;</span><span class="n">signal</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span>  <span class="o">&lt;</span><span class="n">sys</span><span class="o">/</span><span class="n">ipc</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">include</span>  <span class="o">&lt;</span><span class="n">sys</span><span class="o">/</span><span class="n">shm</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span><span class="err">#</span><span class="n">define</span> <span class="n">MY_IPC_KEY_PATH</span> <span class="s">&quot;/data/misc/bluedroid&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">+</span><span class="k">static</span> <span class="kt">void</span> <span class="n">wakeup_receiver</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="o">+</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>       <span class="n">key_t</span> <span class="n">my_ipc_key</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="kt">int</span> <span class="n">share_mem_id</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">pid_t</span> <span class="o">*</span><span class="n">share_mem</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>       <span class="n">my_ipc_key</span>   <span class="o">=</span> <span class="n">ftok</span><span class="p">(</span><span class="n">MY_IPC_KEY_PATH</span><span class="p">,</span> <span class="sc">&#39;s&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="n">share_mem_id</span>   <span class="o">=</span> <span class="n">shmget</span><span class="p">(</span><span class="n">my_ipc_key</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">pid_t</span><span class="p">),</span> <span class="mo">0666</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="n">share_mem</span>  <span class="o">=</span> <span class="p">(</span><span class="n">pid_t</span> <span class="o">*</span><span class="p">)</span> <span class="n">shmat</span><span class="p">(</span><span class="n">share_mem_id</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="n">pid</span>     <span class="o">=</span> <span class="o">*</span><span class="n">share_mem</span><span class="p">;</span>
</span><span class='line'><span class="o">+</span>       <span class="n">shmdt</span><span class="p">(</span><span class="n">share_mem</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span>       <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="o">+</span>               <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">sigquue</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="n">SIGINT</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">){</span>
</span><span class='line'>                        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;send signal failed %s.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>                        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'><span class="o">+</span>               <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s,%d, send signale to pid %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="p">}</span>
</span><span class='line'><span class="o">+</span>       <span class="k">else</span><span class="p">{</span>
</span><span class='line'><span class="o">+</span>               <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s,%d, pid %d not ready</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span><span class='line'><span class="o">+</span>       <span class="p">}</span>
</span><span class='line'><span class="o">+</span>
</span><span class='line'><span class="o">+</span><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">sender</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="o">+</span>    <span class="n">wakeup_receiver</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A note: shmget() is not available in Android, so this is not a valid IPC for Android.</p>

<p>Reference:</p>

<blockquote><p></p><footer><strong>http://www.csl.mtu.edu/cs4411.ck/www/NOTES/signal/kill.html</strong></footer></blockquote>


<h2>Footnote: signal lost</h2>

<p>1 unreliable signal:
earlier version of UNIX signal is unreliable</p>

<blockquote><p></p><footer><strong>unreliable signals</strong> <cite><a href='http://codeidol.com/community/nix/unreliable-signals/5031'>codeidol.com/community/nix/5031/&hellip;</a></cite></footer></blockquote>


<p>2 real-time signal:</p>

<blockquote><p></p><footer><strong>man page</strong> <cite><a href='http://man7.org/linux/man-pages/man7/signal.7.html'>man7.org/linux/man-pages/man7/&hellip;</a></cite></footer></blockquote>


<p>POSIX added signals, and <blockquote><p></p><footer><strong>why signal is a bad AIO than poll</strong> <cite><a href='http://stackoverflow.com/questions/6345973/who-uses-posix-realtime-signals-and-why'>stackoverflow.com/questions/&hellip;</a></cite></footer></blockquote>
3 signal lost:</p>

<p><em>. when signal handler is running, blocked signals is &#8220;lost&#8221; (?!)
</em>. when signal handler is running, the same signal is blocked by default, add SA_NODEFER in sigaction.sa_flags unblock it. <blockquote><p></p><footer><strong>man page</strong> <cite><a href='http://man7.org/linux/man-pages/man2/sigaction.2.html'>man7.org/linux/man-pages/man2/&hellip;</a></cite></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resource leakage in Android Java Apk]]></title>
    <link href="http://yongbingchen.github.com/blog/2013/03/11/resource-leakage-in-android-java-apk/"/>
    <updated>2013-03-11T02:12:00-07:00</updated>
    <id>http://yongbingchen.github.com/blog/2013/03/11/resource-leakage-in-android-java-apk</id>
    <content type="html"><![CDATA[<p><strong>Bug: Keep on resetting BT adapter cause Android crash</strong></p>

<p>Bug description: In GTV/Honeycomb&#8217;s System Setting UI, keep on turning on/off Bluetooth for about 270 times, Android will crash, and UI restart from blackscreen.</p>

<p>My analyze:
First thing is to located where Android system crashed from logcat, there must be something related to zygote, then I found this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>03-08 20:15:00.026 I/Zygote  ( 3749): Exit zygote because system server (3780) has terminated</span></code></pre></td></tr></table></div></figure>


<p>Above that I found a fatal error message:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>03-08 20:14:59.226 F/Looper  ( 3780): Could not create wake pipe.  errno=24</span></code></pre></td></tr></table></div></figure>


<p>then all system service died like below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>03-08 20:14:59.316 I/ServiceManager(  690): service 'usagestats' died</span></code></pre></td></tr></table></div></figure>


<p>Tracing down the fatal error message in Android XRef, the error occurs when creating a new Looper instance, in Honeycomb/frameworks/base/libs/utils/Looper.cpp, where 3 new pips need to be created for one new Looper object.
So I guess the isssue is kind of file/socket/pipe handle leakage issue, to verify this, compare &#8220;lsof&#8221; result after turn on/off Bluetooth once, I can see there&#8217;s 3 newly opened pipes in system_service everytime I performed a turn on/off Bluetooth. Then I found from website that someone reported similar issue on <a href="https://code.google.com/p/android/issues/detail?id=24414" title="Android Bug List">Android Bug List</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/ # lsof |grep system_se >/data/debug/after_turn_off_bt.txt
</span><span class='line'>/ # hciconfig hci0 up; sleep 5; hciconfig hci0 down
</span><span class='line'>/ # lsof |grep system_se >/data/debug/after_turn_off_bt_again.txt
</span><span class='line'>/ # busybox diff  /data/debug/after_turn_off_bt.txt /data/debug/after_turn_off_bt_again.txt
</span><span class='line'> system_se   887        ???  224       ???                ???       ???        ??? /dev/null
</span><span class='line'>+system_se   887        ???  225       ???                ???       ???        ??? pipe:[7641]
</span><span class='line'>+system_se   887        ???  227       ???                ???       ???        ??? pipe:[7641]
</span><span class='line'>+system_se   887        ???  228       ???                ???       ???        ??? anon_inode:[eventpoll]</span></code></pre></td></tr></table></div></figure>


<p>The symptom is quite clear now, but how to locate leakage position in Android?</p>

<p>The first clue is that Looper object is used for Android Handler object, it&#8217;s hard to dump call stack in Android native C++ service, but it&#8217;s easy to do that in Java.
So I added a dump stack in Handler&#8217;s construction method, caught below message when I turn on Bluetooth:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>03-11 05:14:07.806 D/Handler (  898):android.os.Handler
</span><span class='line'>03-11 05:14:07.806 D/Handler (  898):com.android.internal.util.HierarchicalStateMachine$HsmHandler
</span><span class='line'>03-11 05:14:07.806 D/Handler (  898):com.android.internal.util.HierarchicalStateMachine$HsmHandler
</span><span class='line'>03-11 05:14:07.806 D/Handler (  898):com.android.internal.util.HierarchicalStateMachine
</span><span class='line'>03-11 05:14:07.806 D/Handler (  898):com.android.internal.util.HierarchicalStateMachine
</span><span class='line'>03-11 05:14:07.806 D/Handler (  898):android.bluetooth.BluetoothDeviceProfileState
</span><span class='line'>03-11 05:14:07.806 D/Handler (  898):android.server.BluetoothService
</span><span class='line'>03-11 05:14:07.806 D/Handler (  898):android.server.BluetoothService
</span><span class='line'>03-11 05:14:07.806 D/Handler (  898):android.server.BluetoothService
</span><span class='line'>03-11 05:14:07.806 D/Handler (  898):android.server.BluetoothService$EnableThread</span></code></pre></td></tr></table></div></figure>


<p>After doing some source code search, I reached the place in BluetoothService.java when problem occurs:
When turn off BT, BluetoothService will do:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">2146</span>     <span class="kt">void</span> <span class="n">removeProfileState</span><span class="o">(</span><span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="mi">2147</span>         <span class="n">mDeviceProfileState</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">address</span><span class="o">);</span> <span class="c1">//Comment out this line so BluetoothService will not create a new BluetoothDeviceProfileState every time BT reset.</span>
</span><span class='line'><span class="mi">2148</span>     <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then when turn on BT again, it will do:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="mi">2136</span>     <span class="n">BluetoothDeviceProfileState</span> <span class="n">addProfileState</span><span class="o">(</span><span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'><span class="mi">2137</span>         <span class="n">BluetoothDeviceProfileState</span> <span class="n">state</span> <span class="o">=</span> <span class="n">mDeviceProfileState</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span><span class='line'><span class="mi">2138</span>         <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'><span class="mi">2140</span>         <span class="n">state</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BluetoothDeviceProfileState</span><span class="o">(</span><span class="n">mContext</span><span class="o">,</span> <span class="n">address</span><span class="o">,</span> <span class="k">this</span><span class="o">,</span> <span class="n">mA2dpService</span><span class="o">);</span>
</span><span class='line'><span class="mi">2144</span>     <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problem here is, we only need do a reset when turn off BT, then we can reuse the BluetoothDeviceProfileState object after we turn it on again, but Android removed it instead, then need to create a new BluetoothDeviceProfileState object next time. If we did not remove the object every time we turn off BT, then the issue disappeared.</p>

<p><em>My comments:</em>
For Java class who claims system resource in its construction method, we must declare corresponding interface to release them, GC can not do this job for us.</p>
]]></content>
  </entry>
  
</feed>
